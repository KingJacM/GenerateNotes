SPEAKER 0
Hello? Yeah, this. There you go. Yeah, that's good. OK, if you're online, can you please tell me whether you can hear me or not? Yeah, that's great. Good, good, good. OK, so we have a few things to cover today. Um, so before I proceed, uh, what I really want you to do and again, I have said many, many times before and that is that, uh, please go through all the examples which are in week two, Code base. We have gone through all of them in the last lecture. It is kind of easy to think. Well, kind of. I understand it. I watched the lecture and it's all fine. I would really like you to kind of go and play with them. Modify. Make sure that you understand the reason being after this point onwards, we are assuming that, you know, object oriented programming means you can write programmes in Java with the features we have covered so far. I mean, there are many features, but most of the important one relevant to this course. We have covered all of them here. And so each of them you want to know properly. I mean, you know, programming already. You have done two courses before this. It's all about how the object oriented programming works. Particularly with respect to Java. Every language will have some nuances, which you need to know. For example, the string I explained last time the way it is there, and it is slightly different than what we might have expected. For example, then there is something called instance of and a class which also I went through last week, the last lecture. Now, I don't want to repeat everything here. Uh, also, um, we we talked about, uh, um different exa MPs. I mean of, uh, how we can realise interfaces, you know? So here shape is an interface default method, and then we say circle implements so and so forth. All of that. OK, so, uh, please go through them. Um, the excess body fires and so on and so forth. All these are very, very important. And if you have any questions, please ask me right now or ask your tutor So on and so forth. No, nothing difficult here. Just that we need You need to know what they are now. So what we so if you go back to the course schedule. OK, so we have covered the course where we have used the introduction to Java OOP which is what we pretty much covered everything. Um, in that slide, if you go here, we basically covered all these topics already. So all all of them here. OK. And so please, uh make sure that you understand all these concepts properly. So this was all about how we can write programmes in Java that today later on, I'm going to introduce se one and briefly tell what it is. But before that, So so we did all this, OK, this is part of the previous one. So we're going to do today domain modelling. Then we talk about assignment one and time permitting. Most likely, we will also go and start a design by contract. OK, so you see, right now this part of programming is over, we'll come back to it with the generic types and so on and so forth. But the main part is we are finished. Now we are moving on to how you go and model your software how you design your software using object oriented framework and that's very important. And so we're going to go through that now. Then we'll introduce a summit one which is all about designing your software using object oriented framework. OK, not the like what you have done in C, for example, where you know, it's more like a functional approach. So the procedural programming, of course, all those structures are also here. But here we are dealing with objects and then you can use is a relationship HAZ a relationship Which one is suitable Should you have very was public private cater status all those things now. So this is the assignment where you're going to show yourself and to your tutor and to us all of us that now Hey, look, you can look at the requirement and you can design an object oriented system. Uh, you know, now this will be quite useful because most of the real world system would be using this kind of approach. OK, so they are not just the procedural programming, both almost all the time. The approach would be something the way we model the domain. And then we encode that now, even though you use whatever language tomorrow, some other language, this kind of design principles will apply almost everywhere. OK, so they are not only restricted to Java, they are restricted to in general how we design software. Now I mentioned this thing is that there are many courses. For example you know the course where you learn programming and well, initially it was C. Then 1531 was all about you know, Gee and you know, javascript and so on and so forth. It was then project oriented. As you know, it's focused on the project. Then you if you are doing software engineering or or other disciplines, whatever programmes you're enrolled in, you may have a course on database. Of course, on operating system course on A I course on machine learning focuses all of them. This is the only course where our sole focus is How do you design software properly and nitty gritty of that Not just like waving hands and say, Well, this is a good software, bad software. We actually say, Well, we are going to learn systematically how we can follow certain steps so that at the end I have a good software with all those characteristics, like reusable, flexible, readable, so extendable and so on and so forth. So this is really, uh I mean, I think there's one video, maybe already there. Uh, if you go to industry, a lot of people will say this is the one. Do you actually want software programming to know and use? It doesn't matter. You design databases, you design a I system. Whatever. These concepts which we covered in this course are important. So rest of the concepts we are learning, they are not restricted to java or object. They are just applicable to any software design. So let's get that going. Uh, OK, um, and please feel free to ask me questions at any time. OK, so domain modelling. And we are going to introduce a UML diagrams in a simple way. Nothing complicated. OK, so what are the domain models? OK, so the first of all, uh, you as a computer scientist or engineer or software designer are going to go and design software systems now, like we want to design a software system that may be in some other area, some other discipline, and so the requirements will be say about some chemical plant or some biological processes or some uh uh uh uh you know, drug discovery or some solar system. So the domain in which we are going to implement use this software is not what we are very familiar with, because we know. But we know how to design the system from software point of view. But we don't know that domain now. Why? Sara is also true. The people in that domain who know that problem very well. Like I'm a chemical engineer and I know the problem I'm addressing. I'm a biologist. I know how I want to deal with the drugs. I know much more about biology, chemistry or solar systems or whatever, but they don't know how the software sat design. So how these two individuals are going to communicate with each other? Each has a knowledge in their own area, quite deep, but not much about the other. So the domain modelling is basically kind of the representation in which they will communicate with each other. OK, so something hopefully both of them can understand. And so you give me requirement in a in a natural language, say English, for example. But as you will see slowly, that's kind of a lot of time, because natural language is not precise. Well, no. No, I didn't mean that. I mean this. And on that let me tell you something very, very important. OK? As a software designer, if you go and design software for somebody in the future, particularly if you're doing by your own OK, make sure that if whatever requirement they give you, you write it down and exchange that document with them at that time. Because many cases you once you design the software for two or three months down the track, they say, No, no, no, no, no, I don't want that. I want something else. I didn't mean that. I meant that It is quite normal. And I don't even blame the users because they don't even know when they're specifying what they need. And once they see the system, few more things comes into their head. Now, if you're a software designer, you're not going to endless. They go and add things or modify things. So I said, Look, you gave me this requirement at that time, and this software matches that now if you want something more, I can do it, but you will charge more or whatever like that that's not your problem. So this is very important. OK, so when they give you requirements, that will be the natural language. Now, the natural language is not precise. So the idea is that Well, how do I explain that? So that in a visual, uh, easy to understand way. So domain models are used to visually represent important domain concepts and the relationship between them. So of course, that's already part of the requirements. Uh, you know, text. But can I visually Why? Because then it will be very clear to both the sides what is required, what are the interactions between them? And if there is any issue there in understanding or specifying, it will surface. OK, so that's the purpose of domain models Now, more importantly, domain models are up to a certain extent precise. Beyond that, if you start putting everything in domain models, it becomes too complex also. OK, so they are not the Softwares. They are not necessarily going to say, Well, this is my class, and these are the fields in it. You can go up to a certain point, but it doesn't have to be very precise also because then also, if you want to particularly represent dynamic behaviour. They become very complex. So there are many ways you can use domain models we are going to use in two different context, which I'm going to mention that to you and up. For that, I think they are quite good. If you do database systems later on, you will also use so called er diagrams entity relationship diagrams which are very similar to the diagrams which are going to talk about here. So up to that point, they are quite useful. But I would not go beyond that. So that's kind of a first layer because the Doman world has to clarify and communicate. That's what I'm saying between the two party. What are the important concepts? How they interact with it, so that's doing it. So if there is anything that require more discussion or less or changes, it will surface out. OK, do Modelling is the activity of expressing related domain concepts in the words are also often referred to as a conceptual models or domain object models, so there are different names to it, and again there is no one precise way of representing it, so we are just going to use some notations in this slide, and you you need to follow that for your assignment. But remember that there are many different ways you can refer to these, and you can represent them. OK that there is no one standard there. Now. We'll be using so called UML un unified modelling language, and we're going to use so called class diagrams to represent do models. There are many other frameworks available also, I mean, that's from database, which is similar mind maps, concept maps. All of them refer to something similar to what we're talking about here. But for this goes follow what is in this so now. Requirements and analysis versus domain modelling. OK, so that requirement analysis is basically the requirement given to us. OK, so it says that the requirement analysis determines the external behaviour. So I said, that's what the system is supposed to do. How well that we are design the system. So that's an external part where the domain model determines the internal behaviour. It is referring to how I'm going to achieve that, what kind of entities or classes I'm going to create, how they are going to interact with each other how the system is going to work. So that's the domain model part. Yeah. So I'm going to model how I'm going to solve the problem, design the software, but the the requirement is already given to me. And of course, they are mutually dependent because, you know, model should be implementing the requirements and so on and so forth. OK, so what is the domain in case? I mean, it is obvious by now, but the domain is basically the so doctors. Medical doctors are like their domain is medicine, for example. OK, if you are an engineer, your domain is engineering. OK? If you are a cake maker, then that's your domain. You know the particular area in which you have some expertise. OK, Ok, uh, now now look at this problem. So this is the requirement. Somebody says, Well, can you write a software? Uh, for this So the motive example is OK, so what is the problem? OK, tourists have schedules that involve at least one and possibly several cities. OK, so we are different tourists. They'll be travelling one or two through multiple cities. Hotels have a variety of rooms of different grades standard and premium, for example. OK, standards premium. OK, uh, tourists involved schedules blah, blah, blah. Then tourists are booked at either a standard or a premium rate indicating the grade of the hotel room. Each city of the tour a tourist is booked into a hotel room of a chosen grade. Each room booking made by a tourist has an arrival date and a departure date. Hotels are identified Name like, you know, blah, blah, blah room by the number Tourists may book, cancel or up, uh, update schedule in their tour. Now you're supposed to write software for this. OK, so if you're writing in C, you could have thought about a particular way. You may have, you know, gone about how I'm going to design the system. Now again, remember, that is you can even implement that in C or Java or C# or whatever different languages you can use python or whatever. That is not an issue here. How I'm going to model my software, how I'm going to model my solution. I'm going to model this domain. This problem basically OK, so if you look look at this now that we have done, we have covered object programming. OK, and we are saying is that in object only programming or in the tremor, everything is an object and object interact with each other. So the biggest lesson today you're going to learn is that how you are going to start designing Softwares in object oriented framework? Ok, uh and for that you have to start thinking slightly differently than what you have been thinking already. OK, so tell me if you want to design software for this, uh, what classes you may create. Now what we're doing today right now is very similar to what you will be doing for assignment one. OK, so this this is what we are going to do Also you're going to do for your assignment. One also. So in this case, I said this is a problem. OK, so OK, well, in object oriented, everything is an object object is the of particular class. So I would first say Well, ok, tell me what different classes you may want to create here? Yep. Online guys also Yep. Um cities hotels. So it is a one class for city. So, uh, uh, object, maybe for Sydney, Melbourne, Canberra, Whatever. New York, then the hotel? Yeah. Particular hotel. You know, in this case, Melbourne Hyatt or Sydney Hyatt, Or, you know, any instance for every hotel? And then what? So room. So one class is for the room? Yeah. Then Yep. Classes for tourist. Ok, a tourist, for example. Then so you have to read the text now to find out. Now, once you have the diagram about this, it will be much very clear to say, Well, these are the entities, and these are the classes. And then next thing, I'm going to ask how these classes are going to interact with each other. So tell me something important is missing. Remember, everything will be object. So it's not like, OK, I'm going to have AAA link list of something. OK, It's it's object Inside. We have a list. That's right. But it will be an object. So what else? Yes, booking information. Start and end it. Yeah, well, that you can have class for that. Just something related to that. And you said tourist. Hm. Uh, what tourists are doing. So a particular tourist will have some schedule, isn't it? I want to stay in Sydney three days and four days. So how I'm going to store information about the schedule. Yeah, but so so tourist information is about a particular person hotel information of a particular hotel room information of a particular room. OK, now a particular tourist will have a schedule. How I'm going to store that. Hm. But so the idea is that, uh uh uh uh OK A So when you write a programme in AC, for example, python javascript Doesn't matter what you have done. OK? You know, I always say this is that, uh, a schedule, as somebody says. Yeah, Yeah, that's right. Pin, it's a schedule Ba tourist. Uh, yeah, we'll come back, Come to that look shortly. Ok, so, uh, just think this this is important. Also again, Back to assignment one also. But generally, when you design in the system So when you write a programme, it's a state machine. Do you Do you know that a programme? You know, what is a state machine? Ok, so those who may not be aware of that, it's like you are in a one state and then every action you carry out, you go from that state to next state and you then remain in that state until some other action is taking place. You carry out a particular action depending on your action and the state you are in, you go to the next state So my programme is a state machine. So when I start my programme, let's say I declare, uh, some variables in R A. Just to make it simple. So my initial state is all the default values. Then I execute the first line. Then maybe I'll go and change some value in the variable because those variables generally represent the world. The problem space. I would solve something. I would represent all the students in this class, all the patients, all the customers. So in C, I'm going to have some variables which stores information about them, isn't it? Then a customer buys something, so I'm going to modify sum or link list or whatever. So every action is going to change the current state A product is bought by customers so my inventory will be reduced by one. The customer will have that and I have some money in my account. So three or four statements we will go and change those states. Then I remain there until the next customer does something. So in a in a in AC programme, your state is those different variables, you know, or arrays or link list. So that's how we do procedural programming. Are you with me? In object oriented? You will have objects, Objects inside me will have variables and arrays and whatever. But otherwise I have a collection of objects and they are in a particular state. What is the state of an object? The values of the variables in that object. So if I have 500 students in this class, I will have 500 instances. Then a tutor goes and marks your assignment one. So I go and modify the mark for that student in that object. And then it's done next. I said, Well, OK, mark for this. This I go and modify the mark in that object finished. So every time this collection of objects represent the world, I want to I'm the domain in which I'm solving the problem. Are you with me? Yes or no? So when I go back to schedule now, where should you store that there are multiple ways we can design the system. But OK, Yes. So So It's a question there is that Can I store schedule in the tourist class? So So? So tour is a cluster, isn't it? Yeah, which do or should, whatever you call it. So there is a class I need somewhere where I need to represent my tour, and I also have a tourist. And there is a relation between them, in fact, that the tour is made up of the tourist where they are going to store which city they are going to go. So now the first thing you do is you look at your requirement and it say, What are the entities or the concepts I need to deal with? Identify them first, and generally you will need one class for each one of them. Now they will interact with each other. Some of them has a relationship, for example. Tour has certain tourists. Now that's one way you could have. You can design whatever. Whatever you. That's the task. Designing is what you're going to do, and it's not a black and white. There's only one design like that. But of course, there are a good design and bad design, and we are going to avoid bad design and go for a good design. That's the whole purpose of this course. OK, but the idea basically is that first, let me identify the entities and the concepts I want to represent. So I would say yes. You are right here. You can have a tool. The tourist, the city, the room. Ok, so on and so forth. You got it. Now then you decide what information I need to store in each of these classes to represent a tourist. What I need to store to to represent a hotel. What? I need Information City. So you go through those things OK? City name, maybe city population, blah, blah, blah for hotel, maybe. Hotel name, phone number, address. Whatever You decide. Ok, then. So this is I'm just representing entities and concepts of the classes. So I say these are the classes and these are the information I need to store in that class to represent that that particular entity. Now what are the methods I need to provide? So matters are the actions Yes. Histo. Yes. So he says that you may have roughly speaking a good idea. Roughly speaking, you have a class for the tour, for example. And again, we are not saying this is the only way to solve the problem. And then you may have methods so that it can allocate different cities for different days and things like that. So now a tour is not a fixed tour. So I'm I'm I'm building my tour and so I need some methods to do it. Is it right here something like that. OK, what other methods we need. So let's give you simple ideas booking room and that matter would be in which class, OK, so probably the hotel. So a hotel will have a number of rooms. Now I need a method to book a particular room for a particular tourist. And from this to this. So I need that method, isn't it? So that's my action, isn't it? So So what happens first? I decide different entities or different classes I need to represent. Then I decide what I need to store in those classes. Then the most important thing is what are the actions? What are the methods I need to offer in the corresponding classes? Remember, there's a design issue. You can design it in different ways. There's no one. Then you have modelled your system. Now, Now, if you want to get some more hint next slide, we will give you the hint. OK, so generally speaking, things in our design must represent real things in the domains, expert or mentor, mind, real or virtual world. For example, if the domain expert calls something order, we also want to represent that as an order. So there's a mapping there. OK, so it it should do that. Now. I think this slide is more important. So I'll come to that later on because once we see the example, then then you will see why you don't want classes. Just does, which does something more like, you know, order helper or order manager. But they should be part of the class rather than a separate. Um, technicalities do not form part of the domain modelling. OK, now it's not about exactly what will be the signature of the method and what it will do. No, no, that's I just say these are the things methods. Uh, I'm going to offer methods which do XY and Z and then exactly what the name of the math had written very well. We can do that later on. You don't have to decide now. Now go back to the example noun and verb analysis that generally gets you That not always was generally so that finding the the ubis language of domain by finding the nouns and the words the nouns are possible entities and the verbs are possible. Behaviours means methods. So go back to the previous problem. Now, now the same problem. The nouns are bold. Verbs are in red, so the tourist is a non. So most likely it will be a class. OK, the schedule. OK. Hotels, rooms and also the grades like rooms, standard room or whatever, the other room, premium room or whatever. Now, uh, tours are booked at either a standard. So your booking and somebody already mentioned that booking is a behaviour as a method because for a particular tourist, I'm booking a particular room, so that matter should be available somewhere in some class. OK, now, in each city of the tour, you book blah, blah, blah. Now booking a room, cancelling a room, updating a room, creating a schedule, modifying the schedule. These are the actions. These are the verbs and generally they will be methods. And then you will decide where this method should be, in which class they should go. OK, now, going back to my example. So what happens is that you will create classes for a hotel for a room. Um um Then you decide what will go inside there. You know what information I want to store? Then you're going to decide the methods and they say, Well, OK, booking a room now where should it go? In which class? Because booking a room requires me to To to to know the hotel in which I want to book a room or maybe a particular room. Also the hotel room number, OK, and the tourist and the start and end this information and it should go and book that Now. What is booking means what it will be doing. Well, it needs to then go and make that room not available during that time. So So? So that will be hotel class A which will know all the rooms in the hotel and the availability that this room is booked. This to this This to this. So maybe you want to go to the hotel class and modify so that that room is not available. XYZ. You also want to go to the tourist class and somewhere you want to store that that tourist is is staying in that hotel from this to this and so on and so forth with me, so that one method is going to go and change. Instance of that hotel change instance of the tourist and whatever else it needs to change. So when I execute that method that changes the state now. Earlier, that room was not booked after the execution of the method. The room is booked earlier. The tourist didn't have that booking in his state now. So so every time you execute a method, you go from one state. All the objects are in one state. You carry out the action, go to the next state with some modification. You stay there, then you execute a method. You go to the next step. That's all happens in the software. That's simple. It's a state machine. So what do you do? You create classes, then you know I want to have four or five cities in my software, so there's a way to create objects for different cities. There's a way to create objects for different hotels. And when I'm doing that, it will ask me, Well, which city you are in? Tell me how many rooms standard blah, blah, blah, whatever. So I create all the objects. So they are there. Nothing is booked. Now somebody comes and say, I want to book it. So execute the method. You go and modify the state. Stay there. This is your software. You got it. That's exactly you're going to do something similar anyway for your first assignment, but in a different problem set, which we can discuss later on. But that's how you think. You don't think in a procedural way, you think, identify the entities, the information I need to store and the method now the important thing, which I didn't mention but it is very important, is that once you identify those entities, then you think, go back to what we discuss, hang on. Do I need to create a superclass because there are a lot of things common between them? Should I have a one class and then has a relationship? Is a relationship here, or should I have as a so for example, hotel room hotel has a number of rooms, so I can already see this has a relationship. The hotel class will have a R A list, for example, Of room instances. Is it clear or not all it is? It has a relationship. Now where is is a relationship with anybody? You don't have to, but where is there is a relationship. So this is how you think this is the problem solving using object under framework. Now tell me whereby you may use is a relationship schedule is a tour you can So if you have a class for a two No, but the tour will have a schedule. That schedule is part of the tour. I don't know like, uh, you know, I would say but I would rather like the other solution. The premium rooms and the rooms would would that exactly right. OK, The grade of the room is a classic example. OK, there are multiple grades of the room standard in the premium. So can I have a class which is pre represents room. So room number which is common to all of them room area. OK, it's common to everything like that so and so forth. Now I may need to store some special thing in my premium grade, which is not applicable to standard. So I go there, maybe vice versa. Remember, student superclass undergraduate and postgraduate. Got it. So that is one example where I can see now. This is where you do toss up and decide which one. What do you want? That's a design process. But I would say here gonna make sense to have some kind of us relationship. So I have a common thing in the room class and again, the other suggestion is arrival date is a date. Yeah, So you can have a day. Yeah, but arrival date is a date, so you will have one class for the date. So there is no here, OK? And so the date is used, so you may have two variables of so you will have one class for the date, for example. Ok. And that class would have say, for example, to start with three fields. What is that? Day, month and year. And what methods would you would you have in this class? Slightly changing the work. If I have a date method, we'll come back to that later on in some other context. What? What kind of methods would you offer there? Yes, the deck. You can if you want. You can have some more full time. Yeah, you can have all of them now. By the way, there is a date method already in Java, so we can use that. OK, but let's say you are designing your date method. Just an example I'm giving you What? So you think what method I need to provide. So first, consider validation. You want to create a new date. Now I need to have gutters and the settlers which will validate. You can't say day 35 because you can't have day 35 month minus three or 15. Case has to be between 1 to 12. So and so forth. Got it. Then you think, What else do I need? Maybe I want to find a difference between the two dates. Maybe I want to find out. Is this date before this or after this date? Are you with me? So think about that. And I mean, if it's relevant, you may want to put it there. So anything to do with that is that so tomorrow you don't need to go and write separate programme which somewhere method which tries to find the days between the two day it was all given to you now Java already has a date class So you go and look at that first. But I'm just giving an example here. So you see, this is how you start thinking about the let's move to the next one now. So now how do you represent So once you have classes now, I would pictorially represent that OK visual. So we say, Well, ok, classes are just the rectangles and these are the way different relationships can be represented. OK, that's just a dependency. So this is a class A and the object of object B and he says, Well, it's a loosely dependent, so dot, dot, dot And there's a direction also here. So a depends on B, for example. Ok, sorry. B Depends on a, uh this is aggregation and composition, which we're going to go through. Example again, there's a relationship. These are all the relationship between A and B, and, uh, this agriculture example will make it much more clear. Ok, this is just a loose relationship. There's some relationship between A and B but there is no direction. It can be a to BB to a so on and so forth. And this is directed OK and that's like lose the dependence. OK, now the loser form operation of a class Uh, it some way depends on the other class. Association is a class uses another class so this is more like a hazard relationship. OK, Hotel uses rooms like, you know, So it's more like that Uses another class. OK? And that's a directed one. OK, so you know, um, direct could be an individual has a car. OK, so I own that car So there's a relationship, so I have But there's a direction Car doesn't own me. I own car so and so forth. OK, but if there are two people in a relationship, you can say Well, they have a relationship but it's either way. Both way it goes. It's not directed just an example I'm making up. OK, ok, now this is where sometimes it get a little bit interesting aggregation and composition. So generally we have aggregation relationship OK, which is again hazard relationship. All these are different form of hazard relationship. So a class contains another class. So I give you an example all the time. This simple one is that for example, uh, this course has students enrolled in it. So, of course, may have a list of student instances or everybody enrolled here. A me got it. Now, tomorrow, for some reason, we need to cancel the offering of the course. So the instance representing the course offering will be removed. Are you with me? Got it. But the students who were enrolled in that they will still exist in the system because they may be doing other courses. So this is an aggregation. So this course is an aggregation. It's got the students in it. But each of these instances exist on their own. So if this course offering is cancelled, the students objects still remain in this system. Got it? I have lab machines in the lab. Now, if I get rid of the lab for some reason those machines exist, I can move them somewhere else. That's generally the case most of the time that will be applicable. This composition is a strong relationship, which basically says that a class contains sorry object contains other objects. But the issue is that if that class is removed, everything inside is also removed. Now, in the physical world, it's difficult to kind of see example, because if I get rid of the lab, lab machine will still remain OK. If I get rid of this offering the course, the students will still remain OK. So one example I always find for composition is more like, uh, so would aggregate be hez A And both are hez A A. But, uh uh, the the relationship of hazza is slightly different. So in the first hazza relationship, if I get rid of the original object, the object which it contains still remain independently in the next one. The object it contains also are removed. So I give you one example, which is, uh, you go to, uh, virtual, uh, you know, buy something. You go to amazon.com or whatever and want to buy some items. OK, so you go and, uh, select the item so it creates a virtual cart for you. Are you with me? So you're putting those items in a virtual cart? OK, now you decide. No, I don't know about it. So I just want to get rid of the virtual card. Then all the items in the virtual cart are also removed because you know they don't physically exist anyway. So if the card is not there, the the list inside the car is also removed. So that's one example where you can see it's more like a composition. Otherwise, generally you will have aggregation. Now there are many ways we can use the UML diagrams to to to structural design diagram behavioural diagrams so on and so forth. Now there are people who are also relatable of critical of the UML diagrams, and I thoroughly agree with them, particularly when you go to the behavioural diagrams, it becomes too complicated. The whole purpose of uh uh, this modelling is to make it simpler for both sides to understand what is required. But, you know, error will go everywhere because one object instance relates to 10 other instances. They 10 other, so you will have a lot of the boxes there as well. So hang on, tell me what's happening is too difficult. So we only use in these two contexts. OK, one is the class diagram. The object diagram that's all we are going to cover up in this course and we deal with OK, the rest. We just look at the programme and see the behaviour of the programme dynamically. OK, please ask me. So I it's very easy to understand. So there is a class account that's subclass loan account loan account and overdraft account is a subclass of check account and so on and so forth. OK, so the arrow that is a relationship is easy to do. OK, now representing class in the, um L diagram. So you will have the class name and these are the values information I want to store about that every entity and these are the methods. So that's how we do it. OK, so method name and written value, if there is an argument, goes there. But again, it doesn't have to be exact signature, because remember, this can be implemented in whatever language you want. So it's not Java, so you don't have a particular syntax more like a pseudo code here. Ok, please ask me now if you want to object, it will like this object. A one is of the type of the class account and these are the actual values. Now a two is another object with actual value Here Now you don't have methods here because methods are part of the class. OK, it's very simple, so I'll move on. OK, so representing classes up so again, same thing that's a class super class and the subclass. And so these are the, uh very I mean, you know, information, variables and these are the methods and these are additional methods and so on and so forth. Easy. Let me know if you have any problem. So otherwise it goes there. Ok, so, uh everything we have covered already, Sir, it's just a representation. Yeah, association. So this one is just two classes are somehow related. There's no direction, nothing here, this one direction. So the dog belongs to an owner. So there's arrow here and it's 1 to 1. So every dog will have only one owner. Yes, you can also have cardinality OK, you can also then say well ok, A professor teaches the course so Professor teaches the course and so one professor can be teaching. Now, when you write like this, sometimes they also write M here, meaning multiple. So zero or more. OK, so so that you can have cardinality of 12112 many, many too many So on and so forth. So you see here already, uh, through these it tells me a bit more about uh Oh, there is an entity for a professor. There is an entity for the course. There is a relationship between these two, so you can just look at it and and see you don't need to read that natural language now representing associate and, um, L diagram. So I I've discussed this already, So lab contains the computers. I would even go and put you know, full diamond there because it's kind of, you know, how do you interpret something OK or the, uh uh No. Sorry. That's fine. So this is basically association and the composition is this online order, which has got the list of items. And if I get rid of the online order, I will also get rid of the line items. Please ask me. Ok, so the question here, how are you going to make these diagrams? OK, so I think this will be part of your next week's lab Now you don't need to go and draw this diagram from scratch. There are many online websites available free, obviously, where they just help you to draw your email diagrams because it's pretty easy. OK, so you say, Well, OK, just select, uh, that and you drag and drop and you just fill in the corresponding values. Then you can also connect them and so on and so forth. OK? Yes, ma'am Association of beings. Is it just that the sun? Sorry, What does that mean? Because it seems like the just Yeah, I think again. It's not very formal or precise, but the arrow also dependence is subclass depends on the superclass. So therefore there is an arrow here. The same arrow is also for association. A depends on B, for example. So in a way you're right. What he says is that the question is that we have arrow. Using arrow in both the cases is a relationship and association. That's the question. And the idea is that in the context we know what it means, basically. But whether you have a, uh, the arrow field or not, field doesn't matter, really. It's just the arrow matters. It is a good question because here The diamond field not fill matters in Arrow Arrow. It doesn't. So as I said to you, this is still informal. OK, so it's not like precise way, but still it clarifies a lot compared to the textual representation. We need all of them. That's just one step. OK, so again, some more examples of that. So this one is one book has got one or more pages here, not zero or more. OK, so and so forth. Now this is I find always very interesting, particularly when you're coming from like C background and other background. OK, when you want to represent something, should I just represent that using an attribute meaning a variable? Or should I create a class for that? This is what you're going to think. Well, hang on. So if I want to represent something, how do I do it now? If I go back to the previous courses C and data structures, for example, what's happening? Students, customers have I DS are you with me? So I say, Well, this class has got N number of students, so I will have a collection with N number of IDs. Are you with me? That's what we do and then we use search. You give me that student so I'll go and all the student records are somewhere. Then I search for that record and get it Yes or no? Then I use very smart search and all of them Are you with me or not? That's what generally we have been doing so far. OK, when you are in object, ornate programming you would decide to. So you you will have a class to represent a student. And if I have a number of students, I have N number of instances and then all I will say is that this class has a collection say, a realist of student instances. I don't store number student ID and then search for the student ID. I will just have instance with me. So if I need I have instance which got all the information name? Sorry. So name, address, phone number. Whatever I want to say. Are you with me? The question is, are you going to keep on creating classes for everything or sometimes only attribute? Value is enough. So the basic principle is that whatever information you want to store, if you can just store that as a string or a number. That's all I need. And this is a bit tricky. So I got next slide on this also. Then you just create a variable and store it. But if I want to store something more than just the string or a number, then go for a class and then get instance of that class. So when getting often we need to decide on this thing. OK, if a concept is not represented by a number or a string, then you should basically go and create a class so labour can be replaced by a number, so they should be just attribute. Variable a student. Now hang on, Student is just on the number. I need to store information about the first name and the last name and maybe some, you know, phone number, the address or their lab Mark and so on and so forth. Well, then, I need to have class for that now. It may be trivial this time, but look at the next slide. OK, so next one says that I have flight from this airport to that airport. Are you with me? Sydney to Melbourne now one way I can do is that I have a class for the flight and I say, this is Syd. I mean, if you know Syd is a code for Sydney, OK? And this is Melbourne for M Melbourne. Ok, so I said, there's a flight from Sydney to Melbourne. And then if I want to know more about that Sydney airport, I will take YD, go to the airport collection of all the airports and look for the Sydney, uh, instance and and get information. Are you with me now? Just listen. No, no, no, no, no. So now I'm representing airport by string. But in fact, airport has got much more information associated with that, like the address and the phone number and opening hours and all of them. So I should have a class five and I should simply have a class for the flight and then class for the airport so I can have a name of the airport and the phone number. Whatever. And then this is instance of airport. This is what the difference is from a traditional programming style. So it is all about instances, so it's also a time much faster. You need a bit more extra memory because things will be in the end. But don't worry, operating system will look after it. If it is too much, then it will swap it with your hard drive. So it may be a little bit extra over it. I understand. But otherwise it's much quicker because there is no search. Now I just go to that instance and got everything about Sydney. Airport is available through that object. This is also instance of Melbourne Airport. OK, now store name. So I about the name of the city store, for example, and then look for information about the cities or somewhere else. That's a classic programming data structure, the collection of IDs and take the ID and then go and search the information for the ID here. I know that store will have more information, store name and everything like that here. So again, the same thing here. You got it? No, let's say this example. I want to store information about different courses. So I said, Well, ok, course is a class, and it needs a course title course code, uh, units of credit. Uh, the term is offered the lecturers who are teaching it. The the the sessions means that tuts and lab sessions and the students in that OK, so well, I said, Well, this is the way these are the objects. OK, so this is offered in a particular, uh, 19 T 1, 1922. Whatever. Like that. And the same thing. OK, so somebody said, Well, OK, well, I just need one class for to represent a course, and then I'll create each instance for each offering. Yes or no? Got it Now, what's wrong with this online? What's wrong with this? Do you see anything wrong? A lot of duplicate information. Which information is duplicated here? Multiple of the same course. But look, I mean, the offerings are different. The terms and everything is different. Yep. OK, so as you guys have already observed, which I have already highlighted, this part is the same for a particular course. This part is the same. For a particular course. That doesn't change. So why do I need to repeat that? Yep, yep. So you should have a super subclass relationship again. You can We can do it in different ways. One is I agree with you. Superclass subclass. Yes. So Can you make it static now? Generally, static is a bad news, OK? It's like global variables, OK? So even though you can really want not to use it much because down the track we talk. But it it it it can couple like it creates a highly coupled system. And so, generally speaking, global variables you don't want to use like you use function, which I can pick it up and use somewhere else. Static also generally speaking, because static If I do, then uh course is a class, so it can only have one class. So next course do I create new class because static so this it will not even apply here, you know? So I want to have the same course class to create different courses. Would title and UC become attribute on the abstract class? That course extends. So the idea is that Well, now you can do that If you want to, that you have abstract class and the subclass or you just have a class and the subclass are you with me? Got it? So now will this be useful? I have a course Now again, this is not the answer. Only answer sorry. So he says, Well, this is something which is not changing title code Prerequisite. So these things are constant. Got it? So I just to them once. So an example. This is 41511. This is for, uh, 2521 only one. Got it. Then I say each offering, which is the changing part. I have another class now. Here I'm not using is a relationship Now, I can use these, by the way. I'm not saying we can't, but this one doesn't. But this one says that, of course, has collection of offerings. So it's a hazard relationship. One way to do it, maybe other ways to do it also. So this one says this is the course, and this is the collection of offerings, and this collection doesn't store term number. It says I will create an instance, of course offering, which will basically tell me the information about that offering. And I will simply go and store that instance Here. Store that instance here, store that instance here. You got it. Same thing I'll store that instance. So, like, you know, uh, all these instances are in that collection. You got it? Yes or no? I could have used Also is a relationship you can think about as a exercise if you want to. But it would be something similar, you know, of course. And then there's a subclass, but that would still be a little bit complicated than this one. So a lot of time Haza is much more flexible. Got it. That is one thing missing in this. So I'm not giving you the complete answers. What is missing? Yep. Subtle. Is not that so? The course so that this is the course. I know everything which doesn't change like that. And offerings are here. If you go to offering, it doesn't give me any information about which course is offering. Do you see that? Yeah, you got it. So what would I do? So I should have one extra field here, for course and say see? And so that is an instance. So that is an instance of that with me Now you got it now. So I will create an instance of that. So I know that stores everything about that course which doesn't change. Then I create instance of offer offering, and then I store all the information. And then this offering is actually for this course. Now I can go from offering to course course to offering blah blah blah. You got it? Yes or no? Now, how are you going to store information about lecturers or students? I've already mentioned Lecturer, can you represent that by the name? You want to have their office location? XYZ This way. So that has to be class. So a lecturer collection must be collection of lecturer instances. Student again is not ID. It's a name blah, blah, blah. So student is represented as a as a class. And so this array of whatever collection is a collection of student instances. Yes, exactly. Right. So now I said Well ok, there is a class so first But first you think bottom up. Ok, so I said Well ok, I need a class for a student. I need a class for the lecturer. Maybe tutor is also somewhere in case he is required. Ok, then you sit down and say Well ok, I need to store this for student lecture. Then he said Ok, what are these common here? Can I have class for a person? You got it So this is how you're going to design, you say, Well, OK, First I identify entities, then I decide what I need to store for them and methods. Then I Is there anything common? Well, I will then have a relationship. I'll create superclass and create subclass hierarchy. Blah, blah blah or or is there has a relationship? This is your design process. This will create you a structure, different classes, how they relate to each other. How do they call? And that's it. So at this point you see what's happening. You have a requirement. Now you design different classes. The relationship with Visa has a method of this is true. If I may say in the natural language, you then express them as a set of interfaces or classes. Do you realise that at this point you have not implemented anything you know from requirements what these things are supposed to do? So you open up and you say, Well, ok, these are my interfaces and they will offer all these methods and I can even write down comment. It will take this input. It will give me this output. These are the classes blah, blah, blah. Then somebody will come and implement their class. This is the way software development works. And one important thing which we are going to cover later on. But I'll tell you now, because as your first assignment comes up is you may have heard this already before, but your implementation should be test driven. What do you mean by that? Anybody software design or implementation should be testable. What do you understand by that? The important word is first he says you first write. You're right. Absolutely. By the way, you first write your taste and then implement that method. People always do other and all. So, in this process I know all the classes. I know the method. Now I know what that method is supposed to do. So I should be able to go and write method for that sorry test for that. Because from the requirement, I know what and from my design, I know what that particular matter is supposed to do. So, um, I, I just come back. OK, so now I will say I, I can already go and write taste for that. And then I implement the method and test that is already there. I go through and I test that test driven. What we do, we we read what batter is supposed to do we implement, and then we think about the test cases now, OK, Even after that, you add some more tests. That's fine. But you should already have all the required tests before and because, you know, beforehand what that method is supposed to do, So this is very crucial. You got it. And again, that will be part of your assignment. 1st, 2nd, all of them. See right test for API functions, which derives what implement functions. Yeah, that's right. And, uh, course offerings will be basically a collection. And the collection could be, um so the course offerings is a class, and I I'll I'll store that in a collection. I think so. I'm not understanding just in the question. The collection could be anything like, you know, list or a list. Whatever you want to use. Ok, so there are a lot of references here UL diagram. And if you just search, uh um, you know how to draw UML diagram online. You will have, uh, lots of this. And that will also part of your second lab. OK, now you're going to use the ML diagram for your first assignment. OK, so because your first assignment, we can talk now. OK, so your first assignment now is given the requirement you're going to design your software and then implemented in Java. Got it? And so we want to know your design and you're going to communicate your design using L diagram. You will say these are the classes. This is the relationship between them. So coming back auto marking, I think, is only 50% because it has to be correct. System should be correct. 50% is for your design. T is gonna go and say how how you design your software, OK? And it is quite normal that you design your software first one and then we add we learn more patterns and everything. At the end of this course, you must. You will think that my first assignment was really hopeless. Not really, but I could learn better. And that's OK because we can't cover everything right now. But that teaches you that when you grow, you realise that I could have done this, but OK, in the first assignment, we don't That's not part of the marking, but what I'm trying to say you will grow in this course itself. By the second assignment, you will start seeing how you could do do do do in a better way, for example, so but the first assignment right now is already available. OK, so that's the specs. Now, today I'm going to go through uh uh, the specs briefly. Then you need to go and read it, digest it everything. And, uh, next Tuesday, Carl, who's gonna look after who has been looking after this summit for a long time? He will be here, and he can He will explain a few things in a bit more detail and he can ask whatever questions you have interactively, by all means. Meanwhile, you can ask questions on that forum and Carl Will or the T will answer as soon as possible. Now, just me. So I think, uh, yesterday I mentioned that he would have already deployed your repositories, each one of them, you would have your repository for this, and you're going to work on that. OK, so everything will happen in your repository. And, uh, you're going to work on that and uh, your, uh, assignment will be marked also on there, Which I think you have covered everything in the previous course. Yeah, you would ask something. How would you assign a student without creating? Now you have to create instance. And then you can assign instance somewhere else in the collection. So you be creating So So you create. OK, The question is that if a student, if I understand the question, uh, is that if a student is taking three courses, do I need to create three instances of the same student? The answer is absolutely no. You will have one instance of a student because that information doesn't change. And again, I don't want to use. But I just give you an example that will be at same memory address 5000. That's it. Then I have an instance for a course. 1511. It is a realist, and I'll store that instance there doing another course. 1521, for example. I store that same instance here. Do you understand? That's it. So the same instance, just instance, is nothing but a reference in the memory where the information about the student is stored So you are basically you're just storing the same pointer. If I don't know to use the word, but same reference is everywhere. Yeah, So there's only one student. Yeah. No, no. So if you look at Java and most of the new languages, you don't need to do all those stuff. So you use array list. It is very popular. OK, so you can access that as an array or as a list, and you just add it. You don't need to worry about it that they will look after a lot of this resizing is everything is done behind the scene. OK, so you may want to go through like, uh, Java how to use a L list, some examples and so on and so forth. Ok, ok, so this assignment now read every line of the assignment. But today I'm simply going to give you first introduction. What? It is basically OK and then we'll go next round again on Tuesday. But you should be already start thinking about solving it and go and so on and so forth. Ok, so all this information, the maximum delay is seven days after that we don't accept it doesn't matter. Whatever you know, you have to come and talk to us. If you have a special whatever but generally seven days, that's very important. Um because we generally then want to give you the feedback. So things like that OK, but anyway, read through all the instructions, I would focus more on the assignment right now, but you should go through all the things which are listed here. OK, It is due Friday of week five now, So there are, like, three tasks. The first one is a rather simple one. Then the second and the third one is optional. And depending on what you want to do, I think so. Um, OK, now what is this assignment aiming to achieve? OK, understanding of the problem space? No, don't underestimate this. The idea is about understanding what is required and then designing a good software. Then, of course, we implement it correctly. So far, it was all about correct implementation, fast implementation, which is perfectly good right now. Do I understand the problem? Ok, so the idea again, I don't read the whole thing, but you need to understand the problem space properly and design. Thoughtful planning. What classes I need. What is the relationship between them? What methods I need You need to think of Ju Ju. Just don't go open your laptop and start typing not physical pen and pencil. But you need to use, like in a classical way. If I say pen and pencil, sit down and plan it very, very important. OK, then this is the next lecture. So we'll talk about that today or in the next lecture. So the idea is that after the design, you know what each of the method will do. And so what? Under what circumstances we call pre preconditions. What are the preconditions for every method and post condition and accordingly you implement it and we'll talk about that. So later on today or in the next lecture, robust programming and the assignment will be will build your skill in working with Java VS code thinking critically and so on and so forth. So I would say I don't think you have designed such a big system so far. And next assignment will take you to the next step because we really want you to be in a situation where you're comfortable, OK? I mean, you give me the specs and I can do it. It's not a problem. So it's like you are going to the gym and doing exercise so that when you face some other task in real life, you are capable to do that. OK, so hopefully that's what you're trying to achieve. So please, please try to solve these problems by yourself. Do not copy from your friends. If you do copy, you are going doing this service to you. Not to me, not to your tutor. I said A lot of time, I'll be paid the same amount. Tutors will be paid the same amount. We are not losing anything. I'll be you are the one who are not learning, OK, and you are the one in the interview when you face will not be able to answer certain questions because there there is nobody to copy from. There is no generative A I. They give you to give you an answer about what is what you had to do in front of everybody in that, that that interview room or whatever, virtual hall or whatever, so please learn, and when I say ask questions, we are increasing work on us But we say, Well, we love to do that because we want you to teach you. I'm here because I like teaching. Not because anything else you can make much more money. Let me tell you outside that year. But the point is, please use this time, OK to learn. Nowadays you can find lots of things online. You can ask people to do your work. I mean, at this stage, it will be foolish for me to think that that's not possible or I can stop everybody. But we do. We We just finished plagiarism interviews in which we pick students who have plagiarised and we had to go through the whole painful process. I don't like it, but we do it every time. So if you copy from current or the past because we keep on changing the assignment. But still, sometimes people go and pick up something, somebody put it. Our system will check across the board on the Internet, not not only local, and we picked up people also. So the point is, don't do that because I don't want to go through that. And then you fail the course and the whole thing. Why do you want to do that? You know, just learn, OK? So please, I mean, I'm just looking at the time I don't know to read the whole thing, but OK, let me tell you briefly, Is that, uh, the assignment has been evolved and developed by lots of very enthusiastic, passionate tutors over time, and it's in a very good shape right now. It does achieve all the teaching and learning objectives, and at the same time, it is interesting also to design and engage with, and that's not easy to achieve. OK, so what is the problem? What are you supposed to do here? So this is the interface you have. OK? And so, um, this front end is already developed. You're not developing this front end, OK? And so the idea is that, um Ok, let me see. Ok, so OK, let to look at the time, so I'm jumping here and there. OK, so what we are going to do is that you are going to design the back end for this interface. This is the front end which is going to interact with the back end. Hm? Again, the classic implementation of abstraction and capsulation all of them in action. So some they have already designed this front end you don't need. You are going to use it so that you can visualise. What you have done is right or wrong. So it's kind of really engages you in, in in seeing what you do. But you don't need to design this, so don't get confused with that. What you're going to do is design the back end, which carries out certain tasks. The three tasks and the front end will simply call those tasks. And whatever the outcome it will display to you. So you actually see what you have done is right or wrong. So what are the tasks say that is a plane, OK, and there are some satellites roaming around the planet Now. I just quickly go through the important concepts here, um, looking at the time and then read through the whole thing. It will come back on Tuesday and again we'll explain one more time. But all the crucial thing I'll tell you. So you had the context and you know what? What? What's happening? What are you supposed to do, How we are going to taste it, and so on and so forth. So the first one is that there are different type of satellites and there are different kind of devices on the surface. Are you me? So first of all, the assignment says, these are 34 different types of devices you can create. So there's an interface where I can click and say, Tell me which device you want to create and there are few, and it will go and create devices on the surface mobile phone, laptop so on and so forth. OK, then you can also create different kinds of satellites. So there are different types of satellites, so satellites will rotate around the Earth, for example, or the whatever planet, and so different satellite will move with a different speed, and they will have different characteristics. And, he said, these are the what are the 34 type of satellites, which you can create so far, It's like, you know, all you have done is just saying is that you should be able to create Uh uh uh, I already tell you instances to represent different um, objects on the surface and different satellites. So different devices on the surface and different satellites then next stage is next. Task is well, I want to transfer a file from my laptop to satellite. So can I carry out some action so a file can be transferred from my device to satellite? Ok, well, how can you do it? Because, you know, satellite will only have some visibility. So if the satellite is here, it can only see devices that it cannot see. Device, which is here are with me. So you need to decide whether the connection can be made or not. Now, that will require a lot of maths. Don't worry. That's not the purpose of this assignment. So all those methods are already available to you. You don't need to do. You can just use them to decide to carry out that calculations. OK, so don't worry about that. That's not part of the assignment is given to you. So what will happen now is that if I were to transfer the file first, you need to decide whether the satellite can see the device or not. And then if there is a connection possible, then each satellite will have particular and device will have particular characteristic. Depending on that, you're gonna transfer bites with a particular speed, for example. OK, you upload that file to the satellite. So what are you doing right now? You are actually representing this whole system in your software. You got it? Yes or no. Now why? It is interesting because it allows you to create different instances of different devices. Different satellites. Hm. They interact with each other like, you know, you're uploading the file. For example, under certain circumstances, if you are, it's visible, and other things may be in the assignment. Now, you may have come across simulations. Have you come across simulation software? How does the simulation work you may have? May not have. So I'll explain to you briefly if you haven't. So if I were to simulate something, OK, what we do. It's kind of also like that state machine which I described to you. OK, so let's go back to this assignment and then I'll show you because assignment carries out a simulation. So at times zero, there's nothing there and you are going to create some devices. Some satellite, then you say Well, OK, after one minute what happened? After one minute, the satellite will move, isn't it because it's with the rotation and that is already part of the specification of the satellite. So I said Delta T here is seven minute or five minutes. You can decide for example. So after Delta T you decide where will be your satellites? There are four satellites depending on their characteristic. They will be at the next position. Is it right here? Are you with me and the devices? Are they moving? Not moving? Go through them. Do I need to change something after another Delta T again The state of each of the objects may change or not that you need to decide. So what this front end does is it will simply say the time has passed. Can you update all your states next Ji update all the state so simulation What it does is start from initial state and after Delta T it decides the next stage based on the previous stage and the time Delta so next is now again. After five minutes I'll decide what will be my next stage and that will be decided here based on the characteristic of the satellite, the device so on and so forth. Then suddenly somebody said No, Hang on. Somebody press the button to upload that file. So then you need to go and decide. Well, hang on, you know. Is that satellite accessible from the device? Can they connect? Oh, yes. Then I can upload the file with a particular speed. OK, so in five minutes I could have uploaded that many bytes. So after five minute that many bytes are deducted from the device or whatever uploaded to the file. After the next five minutes, some more bytes will go there. Next. Dil, more bats will go there. Are you getting me or not? Now, surely, at this time you think well what this whole thing is about, So I'm already describing this to you in a simple language. You go through this. And how are you going to design this system? In a very similar way. We talked about the tourist problem. We talked about the other in the first hour. Don't get intimidated. Just first thing, OK? What are the concepts and entity I need to represent? Obviously two things you know already you need to represent a device, a satellite, that there are different kinds of devices. Do I need one class. Do I need multiple class? What are the relationship between those class? It's quite obvious I don't want to. Otherwise I will give you a solution right now. Ok? Different kind of students. Do I have separate? Class is a has a go through it, decide what I need to represent, then decide. Is there anything common? Can I have Is a relationship or should I have a relationship? What information? I need to store for every device, every satellite, whatever What methods? And then you see how you can realise it? Yes. If we United States, uh, we have to stick to that. OK, so the question is that if you design a diagram but you're going to design the system now, OK, so and we don't want to tell you how to design it, because the whole exercises shouldn't design the system. OK, so very good question. In a way, I don't know whether you intend or not, but otherwise, it's a good question. Is that how you're going to design the system and how we're going to test it? Are you with me? So and this is important to understand. So I'm not telling you what classes, you will be creating the relationship between them. What is so that is entirely up to you? Because that's what we want you to teach. Learn. Got it. But then how? I'm going to test it. So again, the API the abstraction is in action. OK, so please read through that it creates it tells you uh uh uh This is the interface snapshot from this, and Carl will give you a demo of this also on Tuesday. But please go through that. So Hello, Jupiter. OK, precise. You have a device information where it is stored. You're creating a device at a particular spot for so and so forth. Go through that the simulation world state zero. After Delta Time, it goes to state one state, two state three So on and so forth. And so every tick you go to the next, every tick you go to the next. And that T could be one minute, two minute, three minute and depending on that delta T, You know how you go from one state to another state? That's your simulation. The requirements here. OK, the the model model. The problem, including modelling the satellites and the devices satellite devices must be able to be added and removed at run time. So whatever system you create, I should be able to create new devices. Add to it remove devices. Now remember, you are going to create classes and instances you are going to store it. What we are going to do is that we are going to say create this device with this characteristic. Create another device with this characteristic. Now that method is given to you that's fixed. You can't change that. Are you with me? Because that is the one which front end is going to call. User wants to create this device with this characteristic. This satellite, this character straight. Are you with me now? That file is also given to you here. The specs. I'll go through it so it simply creates different devices. Now. Then I said, Well, I'm going to call this method said Now tell me, Give me all the lists of satellite you have. Give me all the devices you have with the characters, uh, description. So if you maintain it properly, the description will be correct. Otherwise not. Are you with me? So I say, create three satellites and remove one, add one and remove two. So I will know whether add and remove is working or not properly. So that interface, which is uh which is already given to you, is fixed. But then, how do you manage? Inside is up to you. Is it clear? OK, A. Most simply write series of queries about the current end of its state and so on and so forth. OK, allow satellite device to be sent file from one to another, improving implement moving devices also later on. You can also implement moving device. But device is moving, so position is moving, so it will affect few things. Now, please, please. Every time you come up with a solution, think is it suitable for object oriented design? And what I mean by that is most likely your action is simply going to change some values. In some instances, that's all. It happens all the time. So this idea about the procedural you will see a lot of solution. We have a procedural approach, which is what you are used to. So there's nothing wrong with that. But in this you realise my world is consisting of objects instances. Each instance has given particular state Whatever action I'm doing, it is changing some values. In some instances, that's it. Think this way it will be much simpler. OK, the assumptions and please read through that. So there are three devices handheld device laptop devices, desktop devices and it's got some range and so on and so forth. OK, the files, you know, information about the file here the satellites, standard satellite teleporting satellite relay satellite and it tells you what this information all about. OK, so there's a relay satellite so it can just relay. So I mean, just read through that I'm not go through, OK, And the maths everything is available to you Importantly, the visualisation. You don't need to do anything. OK, so your focus is simply implement the record. Now what I want to show you is actually here. Functionality is listed below. You can click. So that's the front end structure. Now the programme structure. OK, now we have a controller and that controller is basically going to call. We'll ask your software to create device, create satellite and it will provide all the required information about satellite device. That's it. And then it will say tick, tick, tick. And then you will tell me the new position or whatever new state of your system. So that's the one the blackboard is doing. OK, so these things are given to you here. Task one. The task one is rather simple. Create a device. So you see, this is what I'm talking about. We are going to call this. We say this is the idea of the device That's a device type and that's a position here. So you should be able to create a device accordingly. Remove device so I give you the same ID as you remove that you remove it Now remember that this is what the controller is going to call now. Inside you will be creating presumably a particular instance. Then store the required information and need to then store it somewhere. I don't care. You need to decide it. Then when you say remove, you will go and remove that. Then S you create a satellite with this corresponding information and you remove satellite. Then I say list ID So and I said, Well, can you give me all the IDs? Currently you have. So you see, if you have hadn't removed correctly. You will give me all the IDs. Otherwise you won't have those IDs. So these things you don't change. OK, now list all the satellite. I DS add file to a satellite to a device. OK, so these are the controller. Get device. That's where I know if this information is all correct. Now, that is also a class which we have given to you. OK, so that class you give me instance of that class which will be provide me information about the current state of the system or whatever like that. So this is how the whole thing is designed and you implement your system as a back end. So again, as listed entity info is here. So So just go through that All the comments are there. Here. OK, task one example. OK, You see, this is how we actually are going to taste it, and that will show you You know what you're going to design here. Ok, so for example, I create a controller. So this is your test file. Ok, that's the first. OK, then You see, I'm creating a satellite with so and so I'm creating another. So I'm creating three satellites here. Then I'm getting a message here. Then I say, Well, OK, I'm adding a file to the device. Then I'm sending the file. OK, now I'm testing whether the system is correct or not. So please go now I say I want to I'm now. Controllers simulate the system for that Delta T here. OK, so you should go. So I said now simulate for five minutes or whatever like that. OK, so then you should go and change whatever carry out all the changes in your system. Basically, you're going to change values in the relevant instances, maybe all or whatever, That's it. That's all you do. So now your system is in new state because every device and satellite will have positions somewhere and you're going to change those positions depending on the time given to you. Now the position of the satellite may change differently because satellite will behave slightly differently. Maybe devices look into that. All the specs are given to you. So this is how you are thinking the problem solving. It's not about this one Big programme does everything you are in a one state. That's it. Add something you add. Wait simulate everything. Change. Wait then send file. Send file. Simulate again for that. This is But this is exactly the front end is doing. F 10 is going to tick, tick, tick every whatever Minute, one minute, five minute, 10 minutes you can jump. I think interface will allow also you to design the delta T if I'm not wrong and then you can do all this stuff Task two the second. So first one, by the way, in the first one, it's it's rather if I say it's a simpler one because it's all about creating devices, deleting them and reporting what you have The second one is the simulation where after did LA what The new situation is. OK, so now simulation. So therefore, the first one is, uh uh I think somewhere there. But, uh, marks are not equal for different tasks. Put that OK task two simulation. OK, so you're running the simulation. This should run simulation for a single minute. So delta T is one minute. OK, this will include moving satellites around and later on, transferring file between the satellites. So that's in your second task. The second task will, you are in current state after one minute, What will happen to just go and modify everything? Come back now list all entities in the range. So now this one said Well, OK, you know, decide the visibility aspect using that formula and you need to list me everything which is currently visible OK of which are in the range. OK, so for this satellite, this is the range. If there's a device here, it's not that you can access it. Also, there's a distance, part and so on and so forth. Ok, now I don't want to go for I mean, you can see the crux of it are a lot of things here. Please read through that send files so file so on and so forth. Task two example. So we have given you a lot of information. So most of the things are already here. Evaluation requirement Task three is only 10% and it basically says, Well, ok, these are the things you have done. But later on, somebody comes and say hang on. But maybe your device Well, somebody is travelling and so the laptop is moving. Can you add that feature with me? You got it and the logic is that if you have designed your system properly, it should be easily extendable. And so that will test that today, you know, because we already written out tomorrow your product is working nice and suddenly, customer or somebody. I also want to add this. So have you designed something which you can extend easily? That's the good software design or change something slightly, easily, quickly. Some behaviour. Now, if you are using instances, if you are using relationship with them properly, maybe that's fine. You can do that. OK, OK, Any questions here? So I mean, I can go, but please read through that and then move on. OK, uh, so and so forth. A lot of things. But again, you don't need to write the, uh, front end is available. You don't need to write all the math calculations available to you. Your focus is your design and of course, implementation. OK, so it gives you just read through a lot of information, other requirements. So on so forth. UL diagram. OK, you have to give me UML diagram of your system and these are the websites you can use. Can you see it here now you also need to write blog. So you look at your blog and so you can't just go and say I've done everything in the last week, for example, Now you can already realise that it's something different and new. You haven't done this kind of programming before, so please start now. Week five will come very soon. And you can't do that in one week. A lot of time. You realise people wake up three days, four days before the deadline. And let me tell you, it will be a heck of a lot of time. Work for you to do that. So you should start now. Ask questions to your tutor, get clarifications and learn. Can you imagine? Tomorrow you are dealing with some real problem. It will be something very similar. Identify entities relationship between them methods don't repeat. I repeat that many times with purpose because you will be doing that for the assignment. And once you do that, the whole programming becomes different. It's all about designing API S, implementing a PS, designing a PS, implementing API S. And of course, then you test so and so forth. Now we also have some dry run. I mean lots of things. Please read through that. OK, OK. Marking software correctness 50% and software design. Uh, 45%. OK, so and so forth. You We give you some taste, but you also need to add more taste also. So there's a mark for that also. Just don't copy. OK, let it otherwise. So look, please read through that and any questions? Come on Tuesday. Ask Karl more in detail. Um but by this time I hope you know and you can even get started already. Read that. Start thinking about different classes. You want to have the relationship between them is a has a, um What information? I will store what method I will provide. It's actually not difficult. Just that you had to do it, OK? I don't think we can start the next topic. It is already 46. But if you have any questions, please ask me online here also. Yeah, the second one. The second one. you will have partner. The first one is individual. Ok? And again, it's a lot of text here. Information. It is actually not that complicated. A lot of hints I have already given to you but you just need to get started and things will flow from that. OK, any questions online, guys? OK, so next week we'll start talking about the design by contract and we go into software principles and then patterns. OK, thank you. Yeah, a long weekend, but, uh, Tuesday is fine. OK, I'll see you on Tuesday. You will be doing design by contract, OK? And again, that's part of the specs already. OK, here's a minute with the these tools where you can buy it. Just wanna make some layout. Is that OK? Yeah, yeah, I forgot. I mentioned it. Remind me of that topic I had to ask. OK? Yeah. So what that says was, uh um yeah, it is. Yeah. Yeah. So OK, so what? That point is that all you know is that what happens? You can write your java solution a XBM and then you can just use it and it will create diagram for that thing. We don't want it to do that because that process is first. You should have your diagram and then you. Yes, perfectly fine. That's not a problem, OK? Because what what we want to see is that you are designing your diagram. And then that's the sum is I have I did this course in 23 terms. Three. So you might know what I'm gonna say. So what a RE you gonna say? Tell me, I. I view you, You learn 23 3 23 3. So satellite and, uh, for sure, definitely. I will do all the implementation, Uh, again, do not copy any line from previous. So technically, technically, if it is your work, you can use it. No problem, No seriously. So many courses don't allow in our course we say, Look, if you are repeating the course and if you have done this assignment or something similar, you can use your code base, which you have done it before in this one. But write a comment that I did this course in T three. This is my submission, and this code is from there so that it will pick up. The journalism will pick up that you have done it before. But then we can read that comment and, uh, we'll say, Well, OK, it's your wife. So we allow it in this course we say, OK, that's fine. Uh, but then Of course, you did not finish that this course before, so you must have not got full marks or whatever. So try to improve it. You with me? I got good, Good, good, good. So then, then No, no, you can but make sure it is the same assignment and then I think you can no problem with it. Thank you. OK, but write a comment because otherwise you'll be caught in a plagiarism. Ok, what's your name? Janet. Janet and surname. Ok, no worries. Thank you. Write the comment. OK? And even that matter Go and tell your tutor also. So the will know. Ok? Yeah, Yeah, go ahead. I forgot in the so they got the questions about

SPEAKER 1
like we need to consider based on the abstraction and caps and but these three elements I don't know. I didn't I didn't learn from the lecture, so I

SPEAKER 0
Yes, so So come outside. That's the answer that she mhm
