SPEAKER 0
OK, I think we can get started. Um, hi, everyone. I think this is the first time you're seeing me. Um, my name is Salil. You can point to No, you can't see my screen. Why is that strange? It stuck on my slides. Yep. Yeah. So that's me. Um, you can just call me Salil. That's easier. Uh, I'm a professor in computer science. OK, someone's phone is playing something. Sorry. Uh, yeah. So, um, I've been here quite a long time. Uh, that said this is the first time I'm actually teaching this course. Right. So, uh, yeah, it should be an interesting experience. Of course, co teaching. I'm not the only lecturer. I think diam taught the first three lectures. If I recall, uh, Helen was here last week. Um, I think I'll teach today and maybe, uh, the next two lectures, and then we'll sort of go back and forth, right? Hopefully, that's not too disruptive. Uh, and, uh, shouldn't, uh You shouldn't have any issues. Uh, with the content I normally teach, uh, networks. Uh, I. I do see 11 person here has done Maybe there are a few others. Unfortunately, not a lot of people show up to the actual lectures these days, so it's hard to actually put names against faces. Uh, right. Uh, but if you have done a networks course, uh, you might have done it with me. Of course, I'm not the only one teaching that course. I I've also taught, uh, IOT. I've taught some of the first year courses in the past. I don't teach them anymore, so that's a bit about me. I do a lot of research in the cybersecurity slash, um, network slash distributed computing Blockchain space. So this is certainly a topic, uh, I enjoy to speak on. So, uh, let's see how we go. Uh, yeah, a few announcements. I think there was some confusion about some of the deadlines. Hopefully this announcement, uh, just clarify that. So your first project, essentially, your lab is due by Sunday, as it says. Here, Have you all formed groups? Yeah. Not OK. Yeah. If you haven't, uh, please, please. Please do so. ASAP, There's some posts on the forum if you're still looking for group mates. Ideally, we want, uh, four people in each group. But if we cannot have an equal division, we'll allow a group of three or a group of five. Right. So make sure you get your groups, uh, registered. And in fact, you do have a task due earlier before I mean by the end of this week. Right? So you need to create this, Uh, you need to tell us a little bit about what you want to do in your project. Um, and we'll take it from there. Right. Uh, we'll give you some feedback, and then you can start, uh, working on this. So interestingly, uh, this Yeah, this course does have a project. I don't know if you have done projects for your courses in the past. Some of you may have Some of you may not have, but either way, it's going to be interesting to work in a group and come up with something exciting. Right? This is something you should be proud of. You're not just doing it to get a grade in this course. This is something you can talk about in your interviews. For example, right? When you go somewhere for an interview, you can put it on your CV. You can brag about it right to your prospective employers. so use this as an opportunity to take in all the content you're learning and do something exciting. Uh, and you have the freedom to choose the topic, right? So pick something that you're really passionate about, right? Ok, uh, any questions on that? If not, let's dive into Oops. OK, so, uh, I think Helen went over some of the basics of software engineering. Am I audible at the back? This seems to turn the other way, and I want to make sure I get recorded correctly. Otherwise students will complain. OK, so, uh, Helen must have covered, uh, some of the basics of software architectures last week. Uh, what I'm going to do is, uh, we are going to use this software architecture lens. Uh, but to focus on how you might use, uh, Blockchains within your applications. Right. Um, you don't necessarily have to use Blockchain. So the first question you really want to answer is is Blockchain necessary in the first place, right? You you don't want to use it just because it's trendy, right? I think we are past that phase. Right? Perhaps you have seen three or four years back or maybe even earlier right. There was this grace of coming up with all sorts of Blockchain applications, right? Some of them didn't make sense at all. I mean, you would sit and wonder why. Why are they even using a Blockchain in the first place? Right. And I think now the industry has sort of stabilised. So we've found some. I wouldn't call them killer apps, but suitable apps right where we see that Blockchain makes sense, right? One example is decentralised finance. Perhaps you have heard of that, right? Uh, supply chain management. Right. And of course, you have the Cryptocurrency stuff, which will kind of, uh, keep to the side that continues. Uh, but there are some of these applications where it's starting to make sense. Yes, that Blockchain, uh, does actually fit right. So we'll have a quick look at, uh, that, uh we talk of the positives and negatives of Blockchain, uh, at a high level, of course. And then, uh, we'll kind of use those to, um no, normally, what you would normally do in any software architecture, right? You look at your requirements, then you come up with your design, you probably come up with multiple designs And then, of course, you have your nonfunctional requirements, right? Like performance. Uh, for example, Latency throughput. Uh, security. Right? Uh, usability. So you define the performance, uh, metrics that are important to you, and then you analyse your designs. Right? Which one actually gives you good performance based on your metrics? Which one gives you poor performance? And they'll always be trade offs, right. It's very unlikely that you will come up with an architecture that just goes straight ticks all across your metrics. Right. You'll have some things. Uh, a design might do. Well in some dimensions. It may not do well in others, and then it's up to you to sort of assess that and come up with a solution that suits your trade offs. Right. Another person looking at it might have slightly different, uh, requirements. Uh, they may go to another design based on their trade offs. Right. So it's not like there's always one fixed, uh, winner all the time, right? It depends on the trade offs And what, uh, so yeah, we'll start, uh, with this overview of, uh, what role Blockchain can play. Um, And then we'll look at these four aspects essentially storage. Uh, computation communication and asset management. Oh, before that. Uh, yeah. So this was something I hope it's visible, uh, at the back. So this is a very interesting article. Uh, I forgot the author's name, but if you click on that, you'll find the names of the author. So it's very well cited. Right? So this is a nice I mean, yeah, you You can always come up with exceptions where this may not hold, but this is a good starting point to first even assess. If Blockchain actually makes sense for your application, right. So they've given this very clear flow chart. So you start here right essentially and say, OK, do you have, uh, do you need to store any state, right? Does your application need to store any state? Well, if not, then you don't need any data store. Really? Right. So if you don't need a data store, you don't really need to use a Blockchain. Because in the end, one important aspect of the Blockchain it It gives you this, uh, immutable, uh, ledger right where you can store, uh, state information forever. So that's kind of fairly obvious. Now, assuming you need to store state. You need to then ask the question How many entities are going to write to this store? Whatever that store may be, right, And and for now, we'll assume it's some abstract storage. So how many writers do you actually have if you have only one writer? Then again, Blockchain may not be the right choice of technology, right? If you just have one single entity writing all the time, you could just go with the database, right? A centralised database, Uh, for all you know, right? It will give you a much better performance, as you'll see, uh, and as you may already appreciate, Blockchain has certain performance. Uh, negatives, right? We know that there are certain limitations with Blockchains, so in this case, a regular database might suit, and you won't need a Blockchain. Now, assuming you do have multiple writers, multiple entities potentially writing into this, uh, store of state, um, then you need to consider all the, uh Oh, sorry before. Yeah. Are there multiple writers? And then you need to ask yourself, uh, can you always use a trusted third party? Right? So what are your assumptions in terms of other entities in your system, right? Will you have a non trusted third party who's always online and will always be available when you need need it? Right? Uh, so in this case, the right operations can be delegated to the trusted third party, and it can essentially, uh, function as a verifier for the transitions of your state. Right. Um so again, in those instances, you may not necessarily need a Blockchain right again. As I said, this is not hard and strict rules. Sometimes you might still need the auditability that a Blockchain provides, right? And in those cases, you might still consider the use of a Blockchain right now, assuming you don't have a third trusted third party who's always online, right? Uh, so in this, for example, it may it may still be trusted, but it may not be online all the time. Right? So in this case, uh, it can function as a CER certificate authority essentially right. So it can certify other entities and say, OK, this entity is certified right, And I allow this. I've given this entity permission. They can now go and write to the storage. Right? So this is very common right. If you have heard of the public key infrastructure, you can actually get a certificate from a public key provider. Say VeriSign. Right. I get a certificate from VeriSign. Where is Sign has certified that I'm Salil, right? It has put trust in me. It has confirmed my identity. So I can show that certificate to someone pro, which proves that I'm Salil and assuming the trust where is sign? They'll say, OK, I, uh I can see that you are Salil. I give you authority to write into this, uh, shared, uh, data store, right? Oh, so in those instances, you might consider a permission version of, uh, the Blockchain. Right. So then it comes down to whether you want the second, uh, part to look at then is who do you trust to view the Blockchain? But let's come to that later. At least from a writing perspective, you can go ahead with the permission. Uh, Blockchain, Right. Um, if the writers, uh and then the other thing to look at is, uh are the writers, uh, trusted, Right? So if they are trusted, uh, Then again, perhaps you may not need a Blockchain in the first place, right? Because assuming you have full trust in all the entities, right, you might say OK, in this instance a central, uh, or maybe even a distributed database, uh, might work. And you might not necessarily need a Blockchain right if the writers are not trusted, Uh, that's essentially when you want to start considering whether a Blockchain makes sense. And then, uh, the next question to ask is Is public verifiability required? Right? So basically that means who can read, right? Who can read the Blockchain. So we have addressed the issue of writing. Now the question is, once the data is in the Blockchain, who do you allow to read the Blockchain? If you want anyone to read the Blockchain, then you can go with the public permission Blockchain right. So you know this means in order to write data, you still need permission. You have to go through a certificate authority to certify you. But if you have to read the Blockchain, you can just go ahead and read it. That's, uh, public permission Blockchain groups. Sorry. Ok, On the other hand, if you don't want the Blockchain to be public right, you don't want anyone to read the Blockchain. Then you might also add provisions to say, OK, you you need to be certified to even read the Blockchain. So that's where you would go with the private and permission Blockchain. A very common example of this is supply chain applications, Right, Because, uh, in supply chain applications, uh, you're looking at, uh, business processes you are storing, uh, data that can be sensitive to your business, right? You may want to share it with other partners involved in the supply chain, but you don't want any average citizen to go and have a look at that, right? And in fact, you may not even want your competitors to have a look at that because that may give them an undue advantage. Right. So in those instances, you might want to still keep visibility private. And so that's where a private permission, uh, Blockchain would make sense. Now, of course, if you answer no right at the top, right. If you don't know who the writers are Uh, well, in that case, it makes good sense to then go with a permissionless Blockchain. Right? Bitcoin is a very good example of this, right? Anyone can own Bitcoin. Anyone can essentially participate in the Bitcoin network, right? There are no strict rules around that, right? Uh, so in those instances, uh, yeah, a permissionless Blockchain makes sense. So again, use this as a rough guideline. Ok, uh, in fact, when you come up with your project, this could be a good starting point right again. As I said, it's not very strict, but at least it gives you reasonable guidance on whether a Blockchain makes sense in the first place. Right. OK, so, uh, next assuming Blockchain makes sense, let's move forward. Right. So when you are looking at Blockchain, uh, it's good to think of it really as one part of us. It's essentially one software component right within the bigger picture of your system. So it's unlikely you will have a system that only has the Blockchain right. At the very least, you would need some front end application that's interacting with the Blockchain. Very likely you are going to have data that's not being stored on the Blockchain. It makes perfect sense, in fact, to not store everything into the Blockchain for reasons that we'll discuss later, it's very, very likely you're going to need some key management. Right? Because, as you know, with Blockchains. Uh oh. Sorry. Uh, you need to create a public private key pairs. And those keys then need to be managed, right? You may also need keys for other purposes within your application, right? Uh, so it's always good to think of it as a software component. And then look at the pros and cons of using Blockchain and then determine what functionality do you want the Blockchain to actually implement? Right? Uh, and again that comes down to trade offs. Right? So, again, this is a fairly, uh it's a bit of a simplification. Uh, but it's a good, good starting point. Right? So here you see all the applications. Essentially, the main core application is at the top. Uh, the Blockchain here can serve, and the storage is towards the bottom. Right? So the Blockchain essentially is giving you, uh, a shared data ledger where everyone can write and read data. Uh, it also gives you facilities to write code. And if your application requires some sort of tokens or Cryptocurrency that can also be implemented in there very often, you might need an a separate uh, data store, right. Uh, this is mainly because you might have data that is private. As you all know, any data you store here is going to be visible to everyone who has access. And you may not necessarily want to keep, uh, everything on the Blockchain. So you might have some private data that, uh uh that actually I should use the pointer rather than my hand, because that doesn't get recorded, right? Or maybe they have a two cameras here. I'm not sure in any case, So you have the, uh, private data where you want to store your, uh, personal data which does not need to be revealed, and the other instance where you might keep data separate is if you have a lot of data, right, because there are limitations to how much data you can store, uh, on the Blockchain. So if you have big data, you probably are better off keeping it, uh, out of the Blockchain because Blockchain is not very scalable when it comes to storing huge amounts of data. Right? Or you might even store this big data in a cloud store if you want to, right. If it's too large to be even stored within your private infrastructure. You might, uh, just put it on Amazon or other cloud services. Right. OK, so what are the roles that, uh, Blockchain can play? Um, so we first need to understand what it can and cannot do right in the first instance. So I think you have seen this slide before. There are four key functions. Essentially, uh uh, from an architectural perspective that, uh, Blockchain can provide so it can provide you with the storage. Of course. Essentially, it works as a database. If you think of it that way, it gives you a computation engine. Um, again, depending on the type of Blockchain. For example, if you look at Bitcoin, you can't really do a lot lot of computations there. But then if you look at Ethereum, yes, you have a good solid, uh, programming language, right? You have. So something like solidity where you could implement, uh, some very interesting smart contracts. Right. So you can potentially use it as a computational engine. Uh, you can also think of it as a communication mechanism. Uh, essentially all the parties that are participating and reading and writing into the Blockchain. They can use the Blockchain as a means to communicate with each other because anything that you write can be seen by everyone else. Right? So it's also an interesting way to look at the Blockchain as a means to communicate, uh, between the entities and then finally, through tokenization, uh, you can actually create digital assets. You can even, uh, create keep records of physical assets, though there are some issues around that which we touch upon and then you can control who has access to those tokens. Right? So you have the flexibility to create a whole ecosystem around managing, uh, these, uh, digital assets right? And this is in part possible because of all the other elements. Uh, all those three elements Essentially right. OK, so the properties of Blockchain. Right? So let's first look at the properties, and then we'll look at, uh, the limitations, right? So, as it says at the top, uh, Blockchain is essentially a complex, network based software component, in a sense, right? It's kind of in a sense you could view it like a distributed database, but it has some differences which will tease. So what are the good things Uh well, uh, the most prominent thing, right? Any? I mean, anytime you think of Blockchain, the first thing that should come to mind is the fact that it's an immutable store. Right? So whatever you store assuming whatever you store has been committed, I should qualify that, right? So every transaction you create until it's committed, of course, you cannot be sure it's on the chain. But once it gets committed and confirmed, uh, then you know that it it will remain there forever. Right? So it's immutable. You cannot change anything in the transaction, right? Uh, and this is a very desirable property, right? The second thing is, uh, we have transparency, right? So anything that's stored on the ledger, uh, all the transactions that are on on the Blockchain, they are visible to everyone. So you have this record essentially right. So this is extremely usable, uh, important for anything that requires auditing. Right? Because you can go and pull out anything you want from the ledger from the transactions. And then, uh, you know that none of that data has been altered, right? So you can trust that data, and it can give you, uh, very interesting insights into the system. Now, once the data is recorded, we do we can guarantee integrity. Right? Because we know that we've, uh, followed the appropriate protocol. We followed the consensus protocol, Uh, that, uh that is used by the Blockchain. Um oops. I don't know why this keeps automatically moving forward. Uh, yeah. Uh, so, yes, we do know that whatever stored on the chain is definitely, uh, has integrity, right? No one can alter that. We are sure of that. However, remember that this integrity only holds for what's on the chain. Right? If you're using tokens to represent physical assets, that doesn't give you integrity of off chain assets, right? I might create a token saying, OK, I have, I don't know, 1000 gold coins. Right? And you might put it on the Blockchain. Now, someone could steal my gold coins. And so that token is has no meaning at that point. Right? So remember this integrity only holds for what you store on the chip, right? Not for what's off the chin. Necessarily. Uh, now, once a transaction is recorded, uh, its, uh, the sender, the creator of the transaction cannot then later go back and say, Hey, I did not create this transaction, right? So that's what we mean by non repudiation, right? So once a transaction is created, it's logged. It's confirmed. You can't then take it back, right? You can't say, OK, I. I don't know how this transaction was created because that transaction is associated with the key, and that key is associated with the person, right? So you cannot then later claim, um, you did not create the transaction. The exception could be OK if someone stole your private key, right? The assumption here is the private keys have not been compromised. Of course. Right. Mhm. Uh, the next, uh, important property is availability for reads right. This, uh, any data that you store on the Blockchain is highly available because it's stored at multiple nodes. So even if a fraction of the nodes go down, for whatever reason, the data is still available. Right? So that's, uh, again a nice benefit. And then, as I entered earlier, it also gives you, uh, authenticity for, uh, digital assets. Right. So since these digital assets are entirely managed on the chain, you are actually creating the tokens on the chain, right? Cryptocurrency is a good example of this, right, Because they are created on the chain. We know we have followed the appropriate protocols to create those particular coins or tokens. And so we know that those tokens are genuine, right? They cannot be faked. Ok, um, how about the negatives now, right? So some of these negatives are, in a sense, a direct consequence of some of the positives. Right? So, given that you have this transparency, for example, it also means you do not have any privacy, right? Because everything is open. So really, you can't, uh, assume that there will be any privacy. Uh, so essentially a positive gives you a negative, right? Which is often the case, right? Uh, then you have issues around the latency for, uh, transaction inclusion. Right? As you may already know, uh, perhaps you've experienced this in your first lab as well. It takes some time before the transactions can be included, right. And it can vary depending on the type of Blockchain. For example, with Bitcoin, it can take substantial time. Ethereum a little less, but still, uh, there is some delay. Right? You cannot. You cannot assume that the instant you create a transaction, it's going to be logged and confirmed, right? It never happens in any Blockchain all the time, right? It might happen in some instances, but not all the time. Right? So yes, that is certainly something you need to be aware of. And in fact, uh, as you perhaps know, to assume that the transaction is confirmed, you might actually have to work for Wait for several blocks to be added, Right to make sure it's on the, uh, correct, uh, chain. Uh, it's not on a folk chain. And it's not an awful, uh, so it it can actually take a considerable amount of time before you can assume a transaction is actually fully confirmed. Right, So that's certainly a negative. A third negative is the throughput of the overall system by throughput here, we mean, how many transactions can we process? Right. So, as you know, with Bitcoin you you have about, what, 78 transactions per second. With Ethereum, you can go a little higher, but you're never going to match the transaction rate of something like which is not Blockchain based, right? If you take Visa or MasterCard, a commonly used example right. They can process thousands of transactions per second. A Blockchain will never achieve that level of throughput. Right? So that will always be a negative. Another negative is, uh, the scale, right? The scale of your application. If you're using a Blockchain by scale here, we mean, how does the overall system perform as we increase the total load on the system So the total load could be manifested in various ways. You could say, OK, the number of transactions, you could say the size of the data and so on and so forth. Right? So, uh, yeah, normally, Blockchains do not scale well, right? They can scale to some extent again, depending on the type of Blockchain. But, uh, you will never be able to match the scale of other non Blockchain based systems, right? The other downside is kind of related. Here is the availability for rights, right, Because remember, when you're writing data into a Blockchain, you you have to account for the consensus process. So, yes, you might create a transaction. You might send it. It might get picked up. You might have a block being formed, but that block might get dropped off right because it's an often block. Then your transaction goes back into the waiting pool, and then it has to be picked up again and, uh, logged into the correct the longer chain. Right? So in that sense, if you look at it from the perspective of writing data, you might say the Blockchain is not actually very available from a writing perspective. It's highly available from a reading perspective, but not so much from a writing perspective. You would put it on the lower end of the spectrum there. And then this is something I discussed when I talked about digital assets. It doesn't give you authenticity for anything that's off the chain, right? Because you can't really control anything that's outside the, uh, Blockchain ecosystem here. Right? Any questions so far? Feel free to interrupt me. Ok, um this it would be good to have some interactions. Yeah, to pursue the case would do not block if

SPEAKER 1
you have a bank, a bank account in common with some of the bank. If I send a transfer of money, it doesn't mean that physical money is being transferred.

SPEAKER 0
I mean, um, sure, but, um so that comes down to how you are representing money, right in in your example, we have, uh I mean, the banking ecosystem, as you don't now, nobody holds, like I mean, of course, we can have some physical money, but no one is keeping stacks of money unless you're a drug dealer or something. But, uh, so we have a digital representation of money now, and since that is accepted, uh, I think that's a slightly different example, right? Uh, because that's not a representation of it's not equivalent to It's not like someone has kept. If I'm sending you $1000 it doesn't mean I've kept $1000 somewhere, and this is now a token of that, right? So your example is slightly different by by here. What I mean is a good example. Could be a supply chain ecosystem. Right. So I've created, uh, some raw material, let's say, 100 gallons of milk, 100 litres of milk, and now I've created a transaction logging that into the Blockchain, and I've said I've given it to the next, uh, player in the supply chain ecosystem. Right. So there we are, basically representing something physical using a digital token. Now things can get a bit fuzzy here, right? What if someone steals some of that milk? Then this token is no longer valid. Right? So that's what I mean here. So it's a slightly different. I mean, good, good point. But it's a slightly different, uh, representation, I would say. Right. OK, so, uh, let's now dig. Sorry. Let's now dig a little deeper and, uh, look at those four elements, right? So we'll start off with the storage aspect. So as we know, Blockchain is an up and only, uh, store. Basically, you're preventing data from being time, so you can ef effectively once you create a Blockchain, right? The data it keeps expanding essentially all the time. You're writing data, right? You cannot delete anything. So it's an up and only store. You you keep increasing. You're basically keeping track of everything from day zero when you started the system, right? So you have all the historical data. You will never lose it. Now, depending on the type of the Blockchain, you can have various kinds of, uh, data being stored there. Uh, so the first example here account balance. Of course, that really only applies to currency. Like Cryptocurrency, right? so it keep gives you some way to track the balance of the accounts, right? For those for that, uh, digital currency that you're creating, right? So who owns how much? Essentially. Right. Uh, the second thing is, uh, the smart contract, uh, data, right code and data, of course. And the state. So you can actually create code, depending again on the underlying, uh, Blockchain. And, uh, it will allow you to store code. It will allow you to store variables and state. Right. So this this can actually be quite rich. Uh, you can store a lot a fairly significant amount of data in this manner. Right. Uh, you can also store data within the transaction itself. Right. Uh, the transaction can have various fields, and that data will then get be logged in the, uh, ledger. Right. Uh, the next thing is, uh, when you actually, uh, execute the transactions. The results of those transactions are also locked. So you have transaction receipts? Uh, when your contract executes, uh, you have the logs of the contract execution so effectively, that is all metadata, right? That you can still use for various purposes, right? Of course it's It's not of a general format. It's of a fixed format, right? Indicating specific things. But it's still data, and it's stored on the Blockchain. Right? So, as you see, there are different types of data, right? Some that are much more flexible. Like what you can store in the transactions. Uh, what you can store in the smart contracts and others which, like those receipts and logs, You don't really have control over that. Right? So this picture here, perhaps you have seen it when, uh, ethereum was covered. So this shows you, uh, what data is actually, uh, stored within ethereum. Right. Uh, this dryer is basically just a mercury tree, right? Uh, so hopefully this is visible. So you see, you can store, uh, the world state essentially state of all the accounts and addresses. Uh, that shows you, uh, some more details about, uh, the account this year is essentially the transaction, uh, mo tree. Um, And within the transaction, you have various information that you can store, like, of course, the standard one, like gas price gas limit to and from, And then some additional data that you are free to define, right? Uh, then down here. You have the transaction receipt? Of course. This is not something you can set. This is standard data. Similarly, here you have log entries, right? Yeah. OK, so, uh, ledger state representation. Right? So, again, this depends on the Blockchain platform. So on the left, here we have essentially what Bitcoin provides UTXO on the right. We have something say, like ethereum, which is a lot more informative, right? So with the, uh, with the Bitcoin, you have a fairly limited amount of information. Uh, that you can store, right? So you have your unspent transactions UTX So essentially, that tracks, uh, basically, uh, individual transactions, right? It only gives you information of, uh, the amount of data associated with money associated with that transaction. Right. So, in contrast, if you look at something like Ethereum, you're actually keeping track of the account balance, uh, of individual addresses. Right. So this is actually more informative. This is something that is more intuitive for us, and it goes back to the analogy you raised of a bank, right? So this is more natural, because in the in the context of a bank, we have our account, right? And we see everything. Essentially, this is my balance at the moment. If I put in money, it's going to be in increased by So and so. Whereas, uh UTXO Well, you you don't really have global state, right? It's just telling you in that particular interaction, this is what I once spent right? And this is associated with this public key. Now, if you really wanted to derive all the Bitcoins I own, you would have to match up all those UTX OS right to the public keys. And in fact, the the issue there is, I might actually keep changing my public key, right? So for one Bitcoin transaction, I might use key one for the next. I'll use key two for the third. I'll use key three. So in order to figure out my balance, you'll have to know all my keys, and then you have to connect all the UTXO them, and that gives you my, uh, balance. Right? So it's a little more tricky to do that in this model here. It's fairly straightforward, right? You just have the account you can go into Ethereum, you can look up any account. It tells you essentially how much ether you have. Right? So that's it's very easy to look that up. I think so. Generally, with UTXO, you won't have that global state easily available. You'll have to derive it right. Whereas here it's all available within the ledger. You just send a query and you get the response, right? Um, yeah. And here, of course. Uh, what this means is, uh, with each transact. So if you look at UTXO the each transaction, you would have either one or it consumes one or more UTX OS and then produces one or more UTX OS with, uh, something like Ethereum. Each transaction will update the latest state of balance. So you have certain ether transaction adds certain ether to your account, right? And then the state gets updated. Of course, that doesn't mean you lose the older state. You can still roll back and query and figure out Hey, what was the, uh, essentially, you can say, Show me the state of the account at block number five or block number 10 or at certain time, right. So you can still go back and view the previous states of balance. So you're not losing historical information, right? So it's essentially like your account, right? You can look at the balance, uh, at an earlier date. And that will tell you, uh, the balance at that time, right? So, yeah, with, uh, if you try to make analogies, uh, to the real world UTX OS are kind of like physical money. In a sense, you have coins and, um, notes scattered all around, and then you need to combine all of that to figure out the balance. Right? Whereas this is very similar to, uh, banking, right. So, looking at it from a privacy perspective, this does give you better privacy for the same reasons. Right? Because someone has to collect this. And the issue here is you might change your public key for each transaction. Right? So this makes it a lot harder to collect information. Here. It's There's no privacy. Really. Anyone can query the ledger and know uh, what's left in your account. The other point of comparison is, uh, since your each transaction has its own UTX OS, you can have concurrent processing. Right? So imagine I have multiple notes. I use one note for this transaction. A second note for this transaction. Third note for that transaction. So all these transactions can be processed in parallel. Of course, you cannot use the same note across multiple transactions That's not allowed. But, uh, different UTXO can be used in parallel transactions right here. You cannot do that because each transaction is updating the state, uh, that you have stored. So you issue one transaction that the change of state gets recorded, then you process the next transaction, then the next. Right. So here, you need to have sequential processing of transactions for the same address. Of course. Um And then, of course, yeah. This leads to fragmentation. Your UTXO are spread all across. Uh, whereas here it's, uh, fairly simple. It's maintained as a state, right, that just to give you sort of two ways of managing, uh, account information, right. So, in general, uh, with UTXO, you can say it's a little more scalable in that it allows you to have process multiple transactions. It's a little more private. Uh, it doesn't mean you can assume your full privacy, right? Don't take it in that way. Uh, you people may still be able to figure out your account balance using some extra additional information. They may have obtained outside the Blockchain ecosystem. If somehow someone figures out what keys you are using, then they can still go and essentially, uh, collect all that information and sort of combine that to give you, uh, to give them your account balance. Uh, but that said it is certainly a lot more private than this, right? Uh, this the benefits here would be really, uh, it's, uh, more intuitive, right? And it's much easier to write, uh, contracts, which, uh, can then quickly look up your account state so you can do a lot more interesting. You can build a lot more interesting applications here, right? Uh, because the state is within the ledger, so you can design a smart contract. Say OK, if the account balance changes to certain value, initiate something, right? Give this person a reward or whatever. Right? So that's easy to do here, because the state the account state is right in the ledger. Doing something like that here is much harder, because the you don't have state like that, right? Uh, in the, uh, Blockchain. Ok, so in the next few slides, uh, we are comparing Blockchain with, uh, other forms of data stores. So since we are looking at it from a perspective of storage first we'll compare against databases, cloud stores, P to P store and, uh, replicated state machine. This will be a little fuzzy. This is something I don't think so. Many of you have seen this, uh, but at least the others should be, uh, reasonably obvious, right? So if you compare to a database you could compare to different kinds of database, of course. And you could compare, uh, across different, uh, attributes. Right. So here we are, comparing centralised database, which is straightforward, and two versions of a distributed database. So in this first version, we assume there's one master who has complete control, and this master will then synchronise the other, uh, replicas essentially right? Of course, if the master dies, we assume there's a protocol that will pick another master from the remaining replicas. But the assumption is that there is always one controlling node here. We are talking of a completely distributed database where there's no one controlling node. All nodes are masters, so everyone has to be instantly synced, right? So that's a little more strict than this right here. The other nodes are essentially dumb. In that sense, they are only receiving information from the master node here. So if you look at these various properties, if you start with storage Well, yeah, in Blockchain, it's obvious it's replicated in centralised. It's obvious there's no replication. Whereas here again, uh, it will be replicated. Right? So that's fairly straightforward. Uh, then if you look at it from a perspective of behaviour, Right, Uh, so a Blockchain is essentially just a log, right? You're essentially just adding data constantly. So when you talk of databases, you might have heard of this term CRUD So CRUD stands for create, uh, read update and, uh, destroy delete. Right. Uh, so th those four are the key operations you can do on any stored data. So if you look at it, uh, when you look at this from a Blockchain perspective, you can certainly create transactions, right? You can read transactions, but you cannot update, and you cannot delete. Right. Uh, whereas if you look at any of these, uh, you would be able to do all four, um, in terms of, uh, distributed database, uh, in this model, you would first, uh, execute those operations on the master. The master will then create a log and send the log to the other replicas. And then the other replicas will update the state. This is slightly different in that those operations have to be executed on all Master because everyone is a master. So it's essentially like you're doing a distributed transaction, right? That has to be executed on all machines, all masters at the same time. So this is a lot more complex than this, right? But it's still doable. It's not hard. There are protocols to do that. Right? Uh, the next thing to consider again, which is a very typical, uh, database, Uh, perspective is to look at these acid properties. Anyone knows what acid is Do AD. Yeah. Perfect. Right. So Atomic City consistency, isolation and, uh, durability. Right. So Atomic City basically means whatever you're trying to execute, it either gets executed completely, or it doesn't get executed at all, right? It doesn't hang somewhere in the middle. Essentially right. Uh, consistency basically, uh, means that the state of the, uh, system, uh, remains consistent after executing the particular operation. Right? So it doesn't leave the database in a inconsistent state. Uh, isolation basically means if you're trying to execute multiple transactions, uh, I think the ordering doesn't matter, right? As long as you execute all of them. The final state, uh, will of the database will be the same, right? Inconsistent. And then durability means, uh, let's say you execute, uh, you complete a transaction, and then the, uh, database dies, and then you bring it up again later, right? So that means, uh, you want to make sure that whatever transaction you executed did not create a problem in the state of the database, even if it went down and came up, it was recorded correctly. Right? Whatever execution you did was recorded correctly. Uh, so, of course, all the databases would achieve that. Assuming you have implemented them correctly in the Blockchain context. Well, uh, yeah, you could say AC. N. I Yes, uh, I guess durability is a little, um a bit of a question there because, uh, I'm trying. I'm forgetting why we put down, I guess, uh, with Blockchains it, uh, because of this, the fact that your transaction, in fact, can if you think about it, there will never be 100% confirmation of any transaction, right? You might say, OK, I'll wait six blocks until my, uh, transaction is confirmed. But that's again some an assumption you're making right that after six blocks, this chain that my block is attached to is the one that the consensus has agreed on. Right. There is still a fraction very small fraction of a chance that your transaction could be rolled back at a later point. Right? So in that sense, it doesn't give you, uh, durability. That could be one viewpoint, Essentially, right now, when you look at it from who Who are you putting trust in? Right. So in Blockchain, you don't have to trust anyone, right? The fact that you're not you're trusting the cons. The fact that all these nodes are following the consensus protocol, assuming they're all following it correctly, right? Even if a small fraction misbehave, we know that Blockchains are resilient to that, right? Uh, so, yes, Uh, the trust is decentralised, whereas here in all these cases you are The assumption is that there is one entity who is managing the database, right? One organisation. So you have to put trust in that organisation. Uh, then it comes down to read and write operations. So when it comes to reading, yes, Uh, Blockchains are highly available, right? You can have multiple nodes, so there's no issues with reading data. Um, the the, uh, distributed databases again, you would say the performance is very high in centralised. Uh, there is a bit of a bottleneck, right, Because it's a centralised entity. So if there are too many reads, then this will suffer, right? A right performance. Uh, with Blockchains. We know it is low for the reasons that we've already discussed. You have to go through a consensus protocol, and it can take quite some time for you to be sure that your transaction is actually locked. Whereas these other ones, uh, I guess here we could say it's high. Uh, here we we are saying it's medium only because it because of this, uh, the fact that you you have to manage these rights very carefully, right? Because all the nodes essentially are master notes. Uh, So I would actually put this more towards high than medium, right? I would say medium high. In a sense, it's still reasonably high. It's just that this ensuring consistency can be a little bit of a pain here and then availability of the data. Well, it's certainly very high here because it's replicated so many times. Right? If you have 1000 nodes assuming all of them are storing a copy of the ledger, you would have 1000 copies of that information in centralised. It's very low if that one entity dies. You you've lost your data. And here, uh, it's, uh, again reasonably high. I would say. Ok, uh, next, uh, let's look at, uh, cloud Uh, so with cloud, um, I mean, in a sense cloud is a database, except here it's We are talking of something that's at a much larger scale than standard databases. Right? So when it comes to trust again, um, this is decentralised in cloud. You're still putting trust in one entity, right? Amazon or whoever is managing uh, the cloud server, the management, by management, we mean, what say does a particular user have in managing the data? Right, So in a Blockchain, well, you as a user could participate in the Blockchain. You could be hosting a node yourself, right? You could be part of the Blockchain, so you can certainly be part of the ecosystem. Of course, you don't have full control over it, but you can certainly be part of the ecosystem, right? Whereas here, of course, it's the cloud provider. That's, uh, managing everything. Data ownership can be a little fuzzy, particularly when you're putting stuff on a public Blockchain. Right? Uh, the questions arise. Who actually owns that data that you have put in there? Do you have? Do you have ownership or not? So these are a little vague questions. It's not very clear because there are different juris jurisdictions that may, uh, govern this right. There are different laws that may govern this. The general assumption it's always sort of good to make is that nobody owns this right, and it's, uh, unregulated. Whereas here normally the assumption is you own it. That said, when you're signing up to a cloud provider, you have probably ticked the agreements they've given you. And if you look inside the agreements, you'll find certain clauses on data ownership right? The cloud providers are often subject to the data sovereignty laws of the country in which they are operating right, so any cloud provider in Australia needs to follow whatever data sovereignty laws set out by Australia. Right, So that's something you do need to be aware of. That's a little fuzzy when it comes to something like a public Blockchain, right? Because it's hard to sort of control that in in a manner like you, you would When it comes to a cloud provider. Data integrity is, uh, high, uh, in the context of a Blockchain. So because we are following, uh, but it's a little probabilistic, right again, given that consensus is always probabilistic and, uh, the fact that each transaction is checked and verified by other nodes, we can say the integrity is high. But, uh, there are There is a possibility your transaction may get dropped out right and may have to be re added into the Blockchain. So that's why it's probabilistic, uh, data integrity with cloud providers. Uh, the reason we say low is essentially because it it's normally defined by some sort of service level agreement that you have agreed with, Right? Um, so, yes, uh, you have that agreement? Uh, but the integrity is a little questionable there. Right? What do you do if if amazon alters your data right uh, I don't know. What? What? Uh, can you go to court? I'm not sure. All right, so that's that's that's why we say, uh, this this is low here, performance and scale. We've already said, uh, with Blockchains, you will always suffer. There is no way around that the performance and scalability will generally be low with cloud services. Of course, you can have very high scalability. Availability will generally be good. In both instances, cost will invariably be a little higher in the Blockchain ecosystem. This will be much lower, right? Um I mean, if you look at, uh, AWS pricing or any other provider, it's reasonably cheap these days to get, uh, your data stored on this. Right. Uh, the third comparison we'll do with is, uh, P two P data store. So these are slightly different from Cloud by P two P here. We mean this is not managed by one entity, right? So it's not one entity that's managing this. So good examples of this could be BitTorrent, though strictly speaking, it's not a store as such, it's a means to distribute files, but still, it's a close approximation, right? Some better examples are something like, uh, store J, um, or say IP FS. Right. Uh, the interplanetary file system. So these are essentially decentralised, uh, file storage systems, right? Uh, which you can, uh, avail of. Some of them are completely free. Some of them do come with a cost. For example, with storage, there's a small cost involved. It's much, usually much cheaper than something like AWS. Uh, that said, you can also participate and host a stor a node. Right, And you can actually make money. Uh, so it's not like one company is sort of managing this. This is still AD D decentralised ecosystem That's running the storage a protocol. But anyone can participate essentially within this ecosystem. Right? So again, if we compare these two, along some of these, uh, dimensions Well, trust is decentralised in both instances, uh, management again, Both in both of these, you can participate essentially, uh, and you can follow the appropriate protocols, right? Uh, and certainly contribute to the management of the data store, uh, data integrity again. Here. It's high here. It's a little higher than cloud because there are multiple entities involved. So you are not just trusting one entity to ensure integrity. Uh, this is generally highly available. Uh, this, uh, it can depend a little bit on the popularity of the data. Often, right? For example, a good example is BitTorrent, right. If you're trying to obtain a file on BitTorrent, of course, if it's a popular file, you'll get it much quicker. If it's unpopular. You may not even find appropriate peers to download the file from right, so it can vary a little bit based on the popularity. Uh, performance here can be a little higher than this. Certainly not at the level of a cloud system, Uh, but still better than Blockchains. Uh, cost here is high here. Uh, it can be medium to low, I would say. Right. And then finally, we have a replicated state machines. Has anyone come across replicated state machines before? So, yeah, these are not. These are systems which we, as end users normally, uh, don't necessarily interact with these are essentially fault tolerant services. Uh, that allow you to essentially create replicas of state machines. Right? So, in a state machine, what do you have? You have some state, right? You have a starting state. You have some, uh state machine, essentially telling you the transitions. You have some input, and based on that input, certain state transitions will take place and certain outputs will be created. Right? So that's essentially a state machine. So these systems allow you to create multiple replicas that manage these state machines, right? And allow our clients to actually interact with these replicated servers. And in fact, these are in some ways interlinked to Blockchains. In a sense, a lot of Blockchains essentially rely on some of these, uh, four Children, uh, RS MS essentially under the hood. Right. So, I, I won't spend too much time here essentially, uh, on the application aspect. Uh, they are generally very similar. They're very fault tolerant. Uh, both of these systems follow consensus. Uh, the one difference here is in replicated state machines. There's this concept of locking the system. So once a client acquires the ability to write something, it locks, it gets exclusive access, and it releases the lock. Both of these systems follow some voting right. In order to add data. Um, and in terms of ordering the data here, as we all know, in Blockchains, we have the sequence of blocks and within each block you again have a sequence of transactions. RS MS do not, uh, they work at the granularity of individual transactions. So there's no blocks. Uh, but all the transactions are ordered, right, And the performance is perhaps slightly better than, uh, Blockchains. Uh, Blockchains have a lot more overhead than RS MS. OK, so, uh, just as an exercise, uh, let's look at some scenarios. And based on what we have seen, let's see what store you might go with again. You may not always have. All of us may not always have the same answer, given that there might be, um, different viewpoints to look at this. But I think generally we we could converge, Right? So let's say you have a scenario where you have a lot of data. You have high volume of data and high velocity by velocity, we mean the rate at which you're getting data, right. So there's a lot of data. It's coming at you very fast, and you need the data to have high integrity. So which of those four options would you pick Blockchain? Um, what was the other one? So databases essentially centralised or decentralised? Uh, P to P or, uh, RS MS dot So remember, high volume is a the key here. Which of those systems do you think can accommodate a lot of data? Perhaps not Blockchain I would say right, because as we know, you don't want to store a lot of data directly on the Blockchain cloud. Yeah, I think I would agree. Right. A cloud is a good, good place to store a lot of data, Certainly. Right now, what if I change the volume? The rest remains the same. So we are still getting a lot of data very frequently. It's just that it's small data, Right? So imagine something like sensor data, right? So you get it periodically, but it's very small data. I mean, you could still store it in a cloud, but perhaps a distributed database might work equally Well, right. Uh, because the volume is low. Uh, you normally do not want to store high volume data in a distributed database right now, let's say if I change this to, uh, low velocity, right? And let's say we need very high integrity, right? So this could be something like financial transactions, for example. Right? They are not that frequent, Uh, and the volume is low, but, uh, you do need high integrity, right? So, of course, again, you could use one of those two. Uh, but this might be an instance where Blockchain could make sense. Perhaps because the volume is low, the velocity is low. And, uh, we certainly need very high integrity, right? And then finally, you might say you have some medium volume data which is not frequently accessed. Right? So it's more like a retention. You want to store the data, you might access it once in a while, but it's not something you want to keep reading all the time. And you want to save on costs right now again here. Perhaps you don't want to go with Blockchain. Given that cost is an issue, the volume is medium. Um, cloud may work. Uh, databases may also work. You might also explore P to P, right? Particularly if your, uh, costs can be kept to a low. Uh, right. Something like IP FS, for example, is reasonably free or very small. Uh, you would incur very small payments. The same with something like store J, for example, right? So yeah, this is again. These are not definitive answers. These are just, uh, open to debate. But, uh, this could be a good sort of rule of thumb to use. Uh, And then finally, of course. Uh, what about, uh, data that's off the chain, right. So everything that you put on the chain, we know we have high integrity in that. Can we do the same for any data that's stored off the chain? Well, you could do a little bit in that. What you could do is you could store a hash of this on the Blockchain, right? And then at a later time when you go and access this off chain data, you may again hash it through the same algorithm, compare it to the hash that's stored on the Blockchain. And if the hash does not match, then you know that this data was manipulated, right? It's not matching what was used to create the original hash. So at least it gives you some level of integrity, right? By using that hash, of course, uh, you cannot go and alter uh, go back to the original data. That's lost, right? If this data gets changed, then you have lost the original data. There's no way to, um, retrieve that because you can't go back from the hash to the original data. Right? So, yes, you can do tricks like that, but, uh, it gives you It certainly gives you some integrity, right? And, uh, if you want a little bit more efficiency, you could even go with something like a mercury tree, right? Particularly if you have lots of data And you want to store hashes of all that data. You could certainly store each hash as is. But a more efficient way would be to do something like this, right? And then you only store the group. Ok, Um oh, I think I've run a lot longer than I wanted to. Um, maybe let's take a quick five minute break, and then we come back and, uh, complete this right, OK, no.

SPEAKER 1
Yes. Have a question is asked. The question is a good. She called me.

SPEAKER 0
Um I mean, they may offer Blockchain solutions, but AWS definitely does not work.

SPEAKER 1
So if I take an Amazon videos as an example,

SPEAKER 0
I mean that that's a problem for you. And there is always that it might not be exclusive to I had another question.

SPEAKER 1
Mhm. I host one uh, Sydney and everybody in Sydney goes right.

SPEAKER 0
So there are different models, right? So that comes down to this concept of a full node or, uh, just a client. Right? So if you're a full note, then you're a participate. You have the whole Blockchain stored in You're participating. Who? A light node OK Will not necessarily access the whole Blockchain. So it will then rely on these full nodes it It kind of acts as an interface. OK, Do you connect to the wrist so it will not have the full history? So if you want to do a full historical audit, you cannot do that purely. It will need access to free. So does it mean that it's a catch?

SPEAKER 1
It's a catching of are the most of light node

SPEAKER 0
may not even host anything. It might just be as simple as simple as just a pathway. Or it could host partial. So there are models essentially, how much the light not, um mes destroys regarding the shard of the A W.

SPEAKER 1
Does it mean that 11 to 2021 so basically ensuring

SPEAKER 0
there's a full, uh, multiple full copies. Multiple food in the Blockchain sense. If it's just your central server, you again there. You would probably want to have at least two from us.

SPEAKER 1
This I know are like, why is a Blockchain height the the cost of a Blockchain or is it height?

SPEAKER 0
Because you need all these multiple names to post OK,

SPEAKER 1
so the number of nodes will vary a lot.

SPEAKER 0
Even with the distributed, it would still be at least one or two orders.

SPEAKER 1
So you do research in, uh, cybersecurity and those ones? How does Blockchain link network? And so in a sense, because it's a network of

SPEAKER 0
nodes and then the security is more from the perspective of, uh, ensuring, for example, So as you saw, the red Blockchain inherently doesn't involve privacy. You might have applications, but you may want to have some privacy. So in our work, we are looking at creating overlay that from on top, which will give you that extra privacy. So that's one. Thank you. Yeah, I tried after the I. I think I'm very bad with this. Can you post this on the photo? I think the tutors will be better at this week. Ok, Um Oh, sorry. Um Yep. So let's move on now to So we looked at storage. Um, let's now look at the other perspectives. Uh, this will be a little shorter. Um, so we'll start with, uh, computation. Right? So, as you all know, uh, with Blockchains, you can not only store data, but you can also run some, um, computations. Essentially, that this is offered through the smart contract ecosystem. Right? So you can certainly execute, uh, programmes on the chain directly on the Blockchain. Of course, this means that whatever code you are executing has to be executed on multiple nodes that are hosting the Blockchain. Right. So this is, uh, something you have to keep in mind all the time. When you're writing code. When you're writing smart contracts, remember that they need to be executed on multiple notes. Right? So there is certainly that extra overhead involved there, right? Um, particularly on certain ecosystems, like Ethereum. Smart contracts give you a lot a fair bit of power, right? It gives you a lot of ways to express, uh, say business logic, uh, certain conditions, certain triggers. And you can even do fairly complex, uh, programmable behaviours on the Blockchain directly, of course. Uh, in Blockchains like Bitcoin, there's a lot less flexibility to do that, right? Uh, the contract code itself is transparent because the remember the smart contract is stored on the Blockchain, which means it's visible to everyone. It's transparent. Uh, the smart contracts are required to be deterministic. That's again something very important. Because remember, these contracts again have to be executed by multiple nodes. They may not even be executed at exactly the same time. You may have a new node join the Blockchain ecosystem, and it might want to execute that code. So it means that the code has to be deterministic. There has to be always a a fixed, uh, output, right, Because you're starting with the same state. You're starting with the same inputs. So by the execution, once you execute that piece of code, you must always always have the same output. If there's disagreement there, then we run into trouble, right? So we can You absolutely cannot have any in deterministic operations within smart contracts. So, for example, something like floating points. As you know, floating points are always inexact, right? Uh, if you execute floating point operations on different systems, you are not guaranteed to get exactly the same answer. They might be off by a small whatever minuscule of a fraction right. Similarly, you cannot do random numbers for the same reason. Right, Because you cannot always generate the same sequence of random numbers. So all the operations within the smart contracts have to be, uh, deterministic, right? And the performance will be low in the sense that you can never match what you can do on a smart contract on even something like a basic PC. Your basic PC will always be faster than what you can execute on a smart contract, right? So, Y yeah, and there are reasons why you want to put those limitations in, As I said, because your contract has been executed on multiple machines, right? So the, uh, Blockchain itself, it impose some restrictions. For example, in ethereum, there are limits, Basically, how much? Uh, there's a gas limit on each transaction. There's a block, uh, limit essentially on block gas limit on each block. Right. So that ensures that you don't have, uh, sort of nefarious smart contracts doing, uh, launching a denial of service attack on the Blockchain. Right. Um, so there will always be a higher overhead in executing anything on the Blockchain. There will always be longer delays, Right? Because all you have to wait for all the notes to execute the smart contract. Uh, and so on. The other factor to also consider when you're writing code when you're writing smart contracts is, uh what data does the smart contract need, right? Is it using purely data that's stored on the chain, Which makes it a little easier If you are looking for off chain data, How are you going to get that off? Chain data to the smart contract, right? Or then are you better off doing the some of that computation which requires off chain data, Not on the Blockchain. You want to do it off the Blockchain, right? So these are some decisions you have to make while you're designing, uh, what computation needs to be done on the chain and what needs to be done of the chain, right? And again, the answer may not always be the same. It will depend on your specific, uh, requirements. Right? So let's look at what's on offer So of course, the first generation Blockchains like Bitcoin. They don't really give you a lot of power at all, right? Bitcoin does have a scripting language. In fact, it's also called script The script. Uh, you can store a little bit of metadata and you can do some very, very simple, uh, operations using that particular language, right? A very common, uh example of this is when you are paying, you're transferring Bitcoins right from one public key to another public key. Uh, within your transaction, you would normally have this script in your output. That's the locking script. And this would be the unlocking script, which is the input of that matching transaction. And then, uh, the Blockchain would essentially take the unlocking script, combine it with the locking script and then execute this operant Essentially right. So here, for example, in this case, we are paying the Bitcoins to a particular public key, right? So this script is basically the public key. Uh, the unlocking script is the signature and the matching public key here. Right, So this will essentially execute, uh, check. This basically creates a hashh, uh, checks the hash, and then it checks the signature. Very simple operations. Right. So there are some some of these codes you can use essentially with scripting, but that's really all you can do. You cannot do anything sophisticated with the Bitcoin script, right? So you can specify our transaction can spend a UTXO essentially right whether it requires signatures whether you want to burn the coin whether you want to make it, uh, you do not want to spend it until a certain time, right? Uh, and whether you want it to solve a puzzle, uh, by supplying some data that matches the hash, for example, this part here, right? So, yes, you can do a little bit, but not a lot, really. The second generation Blockchains are, of course, a lot more sophisticated. They give you a full during complete, uh, programming language, uh, solidity, which you are already using, right? Other languages like, uh, D, AM L, for example also exist. Uh, in hyperedge of fabric, you have javascript in, uh, coda. You have Java. So, yes, you have fully functional proper languages, which allow you to do, uh, fairly sophisticated things. As I said, you need to be careful about, uh um in deterministic operations. Some some of these programming languages will not even allow you to do that. Some may. But then you have to be careful not to execute, not to use any of those functions that could lead to in determinism. Right? Uh, there's also limitations on the complexity. So, as I mentioned already to ensure that there are no denial of service attacks, Ethereum has imposed certain limits in terms of how much gas each transaction can use, how much gas a whole block can use. And these limits are strictly followed. Right, Because you do not want to end up in a situation where a smart contract keeps executing forever, right? Uh, that that will bring down the network. So that's the reason they impose these limits. There are, of course, limitations on memory. You can't have a lot of, uh, things in memory. And then, of course, uh, access to the data itself. Right. Um, you have limited access to data on the chain, uh, directly. Right. So these are some things you do have to be mindful of. Even though you have the flexibility, you have to look at these other limitations when you're writing your smart contracts. Right? Uh, now, very often, uh, you would be relying on off chain data. You would be relying on off chain computation as well, right? So when it comes to off chain computation, well, those things are happening off the chain, so there's no direct control the Blockchain can impose. And they are normally done through, uh, entities like oracles. Essentially, Uh, but you can still add some extra integrity to all of this. For example, uh, there's a very common, uh, model where you say you have some trusted execution environment. Right? So you might have heard of this intel SGX platform that gives you a trusted environment where you can be sure that the code your, uh, executing is being done in a trusted manner, right? Your full trust in that So you can ensure that you make the off chain computations execute on this trusted, uh, execution environment. It's called TEE for short form. And then, uh, the environment will give you an integrity proof, and then that, uh, result and proof can be logged on the Blockchain. Right? So at least you've got this proof you have ensured that it's executed on a trusted environment and then you've logged the proof on the chain. Right? So that's the best you can do when it comes to off chain computations. Right? Uh, there are also other ways. So this is something we are doing in our research. For example, if you want privacy, if you want trust if you want integrity, there are these very classical concepts, uh, which are based in, um, cryptography, like zero knowledge proofs, uh, homomorphic encryption and so on which you can add, uh, to this off chain ecosystem and that can allow you to add all these, uh, properties, which, uh, may be necessary in your applications. Right. So I'll leave it at that. We don't have the luxury to get into that. That requires a lot of, uh, cryptographic, uh, knowledge. Right. OK, so that's, uh, all I have to say about, uh, computation. Uh, let's now briefly look at communication Now, strictly speaking, I mean, you don't think of Blockchain to be a means. It's not a net. I mean, it's not like sending network messages, but still anything that any transactions that you create, right, they are broadcast to the old network. They also get logged on the ledger. So that gives you a proxy for entities to be able to communicate with each other, right, Because the transactions can be seen by anyone else. And as we know, transactions are, uh, open. They are transparent so anyone can look inside those transactions. Anyone can look inside the state information, and that can be used as a means for communication. Right. So this is quite widely used in applications like managing supply chains, right? So if you're using a Blockchain to store information about, uh, ownership of, uh, the goods essentially, as they are moving through the supply chain, each of those transactions that you log can be used as an indication for the subsequent entities to take actions. Right. So this example here, uh, let's say, uh, you bought something from another entity or le Let's look at a supply chain example, right. So I created some raw material. I created a log of that transaction on the Blockchain, which can be used by the, uh, middleman as an indication that the raw material is ready. They can then come to me, they can take the raw material, and then we can log a transaction saying this raw material was passed on to this middle man that gets recorded on the Blockchain. That may trigger subsequent actions by other entities. Right of the producer, for example, now knows that the middle man has the raw material. They can source it from the middleman. So essentially this sequence of events can be used to trigger various, uh, um, aspects of the, uh, business processes. Essentially right, Uh, one does need to be careful, though, In that, uh, what if the transaction ends up in a, um, you add it into a block. And what if that block is now an orphan? Right. So that's something you have to be always careful of when you consider Block. What what are the implications? Right? If you accept a transaction, if you take an action on it, what happens if that transaction later gets put back in the pending pool? Right. So that's something. Uh, you must be careful about when you are making decisions purely by looking at transactions like that. Right? And you can do a lot of sophisticated things in something like in Ethereum you can subscribe to, um basically, you can subscribe to log events, right? you can say OK for this contract. I'm subscribing to the log events, and then you can initiate certain actions based on those log events. So it it has the flexibility to do a lot of sophisticated things. Uh, if you wish. So, Yeah. This is, uh essentially what I was referring to computation communication, right? Essentially coordinating a sequence of events based on those transactions and supply chains, Uh, is a very good example essentially of this. And in fact, some of this could even be triggered by some off chain action. Right? And you could even have some off chain actions happening along that path. So one on chain action might trigger an off chain action. Then the off chain action has to complete, which could trigger another on chain action. Uh, with off chain stuff. Uh, you do. You are certainly relying on oracles. Oracles are entities. Essentially, that allow your Blockchain component to talk to external, uh, facing stuff, external facing data, external facing entities. Right. Um and you do need to trust the oracles, though. There are decentralised, uh, oracles as well. But still, you need to place some trust in the oracles in the end, right. And, uh, there are nuances to this. Essentially, how How does the Blockchain support oracles? Some Blockchains inherently support oracles. Uh, some say, OK, The oracle has to essentially send transactions. Uh, and they can only interface with the Blockchain through transactions. Right? So there are slight nuances depending on how oracles are actually implemented. Right? Uh, but generally, uh, you do need to factor in some delays because with oracles, you're dealing with things that are off the chain. So you have to factor in that extra delay whether it be to fetch the data, whether it be to do the off chain computation. So there will always be delays right between, uh, say the external state change and then what, uh, gets recorded on the chain I And in fact, this is something uh, you might come across in your projects, right? So when you design your projects, I mean, I'm I'm not saying definitely, but at least some of those projects will probably need to rely on oracles, right, Because you will be relying on information outside the Blockchain, and that's when you start. Need to start thinking how you are going to interact with these oracles. OK, now, finally, uh, through the fact that, uh, Blockchain gives you storage, it gives you computation, and it gives you communication by virtue of all those. It also allows you to manage, uh, assets and control, uh, access over those assets. Right. So a very good example is Cryptocurrency, which you are all aware of. So Cryptocurrency is created on the Blockchain. And, um, essentially, it allows you to manage who has access to those to that currency. Right? Similarly, uh, you can create, uh, virtual assets, right? Uh, Ethereum, for example, is very popular, right? ER C 20 allows you to create fungible tokens and ER C 7 to 1 allows you to create non fungible tokens. Right. And you've probably seen the hype around NFTS in the recent past, right? So it gives you a good platform to manage, uh, these assets, you can do a lot. Lot of complex things, particularly with something uh, like Ethereum. Right. Uh, you can programme, uh, stuff like, uh, you could say every transaction should have multiple signatures. Or you could say the transactions have to be signed by a certain M out of N nodes. So you can do all these sort of implement all these sort of complex, uh, control models over the asset. I think your lab had an example of an escrow, if I recall. Right, So that that's again, an example where the smart contract code is actually controlling an asset. Right? So that's a very popular use case, uh, until a certain condition and, for example, until a payment condition is satisfied or a certain time is reached, uh, that the control of that asset is not transferred to the entity. Right? Uh, you might also have something called an, uh, atomic swap. Essentially, this allows, uh, two assets to be exchanged in one transaction. Right. Uh, you either exchange both those assets or you do not exchange, uh, those assets. Right. So that's where the, uh, the atomic comes from. And some, uh, sophisticated platforms, like, for example, cardano. They give you a lot more, uh, flexibility. They will, uh, they bake these asset management, uh, mechanisms, uh, into the actual, uh, protocol. So you have these cardano, uh, native tokens, For example, they allow tokens to be issued as a set of, uh, base operations. If you're interested, certainly have a look at, uh, cardano. Right? So multi signature is a very popular, uh, primitive within this ecosystem of asset management. Uh, the idea being you're not relying on one entity signature, you're relying on multiple, right? So this is very popular If you have joint accounts where you want both or multiple, uh, account owners to actually sign the transaction, uh, you could give a little more flexibility in that. You could say, uh, instead of all N parties, you could say at least M out of N and you have the control over what this M would be. Essentially, you could set it to 50%. You could send it to higher. Uh, depending on what you can tolerate, right? So if some of the keys are lost or compromised, uh, you still have the security that you need so you can control uh, that M um so essentially, you can pre define this M and the set of addresses. Uh, that can authorise a transaction. So with Bitcoin, you can do that using the script. Hass, Uh, in a more sophisticated Blockchain like ethereum, you could specify that, uh, in a smart contract, and in fact, you could even offload it to something that's done off the chain. Right? So in this case, the, uh, the keys are managed. The collection of the keys and the signatures are all managed off the chain. And in fact, with this, you can do a lot more sophisticated things. If you are doing things off the chain, you can do things like multiparty computation. Right where you could say, OK, I derive a key from multiple keys, so that gives you a lot more flexibility, uh, in managing the security. Right. So I think there's, uh, something called fire fire blocks, for example, which allows, uh, this multiparty computation essentially to split different parts of the key across. Uh, these multiple parties And you could say at least I need at least M of those keys to create, uh, this, uh, key that I'm going to use, like, um yeah, and then finally, if you want to. So this, uh, you could also create, uh, other assets, right? You could manage other assets. Of course, you can do that in a lot more sophisticated way with Ethereum, given the ER C 20 C 7 to 1 tokens. But There was even an option, uh, proposed, and it's still used to some extent with something like Bitcoin. And interestingly, if you look for this coloured coin white paper, this was actually written by, uh, vitalic before he actually started. Uh, Ethereum. So he came up with this concept of, uh, coloured coins right where the idea is, you are using the Bitcoin to actually manage a asset. A real world asset, not currency. Right? So yeah. So the flexibility this gives you is fairly limited because the size of data that you can add to the script signature is, uh, just a few bytes, I think 40 bytes or something like that. Right? So, uh, you can certainly encode uh, you can use those bytes to represent some asset. Uh, it could be a physical asset. And the, uh, that's basically referred to as a coloured coin because you are no longer using this Bitcoin as currency. You're using it to represent this particular asset. So that means you need to label those coins as coloured coins. And then you need wallets, which can understand that this coin is not a Bitcoin standard Bitcoin. It's a coloured coin, right? so, yeah, you can do something like this, you can say, OK, these 40 bytes can represent 100 assets assigned to, uh, Bitcoin address, and then you can have a transfer, a transaction which can transfer 60 assets from one address to the other. And then the remaining 40 assets get assigned back to the original owner. Right? So it's similar to Bitcoins, except these are assets. These are not actual BT CS, right? And then, of course, finally, you can also exchange, uh, the token back for the original asset. Right? So you're redeeming the asset, essentially, in this instance. OK, so, uh, let's say we have this, uh, example here, right? So let's say this is being used. You're using, uh, you've developed a software system that's using Blockchain. Essentially, uh, it's being used to manage, uh, land registry, essentially ownership of land. And, uh, you're basically taking a physical asset. You're transferring it, you're creating a digital representation of this, right? And then you're managing ownership of that through this ecosystem, so it allows you to verify the ownership. It allows you to, uh, record the ownership. And you you're managing this through smart contracts and then you are also relying on a Cryptocurrency for trading essentially right. So if you sell land, essentially sell this land, you can get the payment, uh, through, uh, the Cryptocurrency. Right. So this could be an example. Application, Essentially, where we are using Blockchain. In fact, you are using it for two purposes, right? You are also relying on the Cryptocurrency aspect, and you are also using it to manage the, uh, ownership of the asset. Right? So if you think about this application, we are actually using all four aspects all four aspects we looked at, right? We are using the Blockchain to store ownership information. Uh, that is being stored on the chain ownership records. Uh, we are using the computation aspects through smart contracts to verify the ownership, to approve ownership, to approve transfer of ownership from one entity to another, right. And, uh, the, uh, contracts would encode how that transfer actually happens. Um, the communication, essentially ownership recording may trigger approval. The approval may trigger ownership verification. Right. So all the transactions you create here, uh, are essentially a means to communicate with the different entities, right? And the fact that you are creating tokens that allow you to manage? Uh, this, um, piece of land, uh, gives you that as asset management aspect. Right? And of course, there's the currency aspect as well. Um, so you are using both tokens to represent physical stuff, and then you're also using the, uh, native tokens essentially, uh, as Cryptocurrency. Right. So this is a good example that shows you all those, uh, four aspects, uh, that we looked at, um, essentially being used. Oh, I think, um, that's all I had. I'm happy to take questions. I think we are slightly early in terms of time. We have about 67 minutes left. Um, happy to take questions if you have any. If not, uh, yeah, I would say start, uh, if you haven't formed your groups, Uh, certainly do that as priority, but certainly start thinking about, uh, what, your project might be right and pick something that's exciting to you. We've given you some sort of high level examples in terms of domain areas, but don't restrict yourself to that. Certainly. Uh, think outside the box. Think of something exciting that you would want to work on over the top. And we are, uh, looking forward to hearing about that questions. Yep.

SPEAKER 2
Just have one going back to the database. Conversing. Um, you know the cap. Um, perhaps the, uh, block chains. Um, closer the CP always, uh, for consistent data.

SPEAKER 0
Let me just bring that up while I'm Yeah, this one, right? Yep. Go ahead.

SPEAKER 2
The database system. Um um, but I didn't see the, um the cap, Uh, cap theorem on.

SPEAKER 0
Oh, yeah, yeah, yeah. Fair enough. So, cap, uh, consistency. Oh, partition, tolerance, right. Consistency, availability, partition tolerance. So let's so yeah, good. You said Blockchains give you availability.

SPEAKER 2
It's more, uh, more than so you have to have the tolerance before system. And so the other two us between you all, perhaps the consistent data. So yeah, a photo of that.

SPEAKER 0
OK, so let's dissect that. So, uh, consistency, availability and partition tolerance. So I think, uh, availability. I think Blockchain in inherently would give you that right. Given that you have multiple nodes storing the data. So certainly high availability, uh, consistency. I would think it's fairly high, given that you're relying on the consensus algorithm, right to ensure that other nodes have checked and verified, and everyone is essentially agreeing. And so all replicas all, uh, versions of the Blockchain This ledger will be consistent, right? You will unlikely you'll have situations where there is inconsistency in the Blockchain state across the nodes. Right. Um, partition tolerance. What do you think? Uh, if the network is partitioned, you might have issues, right?

SPEAKER 2
Well, actually, I think I just on reflection, I think the availability we don't always. But once it's written, we don't need to have the, uh, something to write again. It's just written. So I think that's uh oh, OK.

SPEAKER 0
Yeah. So yeah, from a right perspective, you're right. And we talked about that, right? The uh right. I mean it. Yeah, Yeah. The right aspect is certainly right. Yeah, OK, thanks. Thanks for raising that. Oh, anything else? OK, if not, uh, we end two minutes early and, uh what what's being what's on the agenda next week? Let's have a look. Uh, yeah, next week. Uh, it's going to be DAS. Yeah, that should be interesting. Uh, Blockchain taxonomy and D apps. Yeah.

SPEAKER 1
Are you gonna understanding database? I know what people do file sharing, but how does people right so P to P so have a look

SPEAKER 0
at ST JSTO RJ I. I think it's pronounced store J, if I remember correctly, right? So that's essentially a decentralised ecosystem. So anyone so you can certainly upload your data. Uh, it will be managed by the ecosystem, but you can also volunteer to host the data yourself, and you get some payment in return. So it's essentially a monetary incentive that they give, so you can also host a node. And at the same time you can also store data on the ecosystem. So it's different from a cloud in that it's not one entity that's storing it right. It's multiple nodes together. So it's like a P to P storage system. Yeah, so you you would have multiple replicas of the same copy. So in a sense, if one node or a handful of node goes down, uh, there's enough redundancy in the system that your data will not get lost. I'm sure they quote certain availability number. It will
